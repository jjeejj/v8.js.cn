<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>V8</title>
  <subtitle>JavaScript V8 引擎</subtitle>
  <link href="https://v8.js.cn/blog.atom" rel="self"/>
  <link href="https://v8.js.cn/"/>
  <updated>2015-07-10T13:33:37+00:00</updated>
  <id>https://v8.js.cn/</id>
  <author>
    <name>Mathias Bynens</name>
  </author>
  
  <entry>
    <title>Speeding up spread elements</title>
    <link href="https://v8.js.cn/blog/spread-elements"/>
    <updated>2018-12-04T16:57:21+00:00</updated>
    <id>https://v8.js.cn/blog/spread-elements</id>
    <author>
      <name>Hai Dang &amp;amp; Georg Neis</name>
    </author>
    <content type="html">&lt;p&gt;During his three-months internship on the V8 team, Hai Dang worked on improving the performance of &lt;code&gt;[...array]&lt;/code&gt;, &lt;code&gt;[...string]&lt;/code&gt;, &lt;code&gt;[...set]&lt;/code&gt;, &lt;code&gt;[...map.keys()]&lt;/code&gt;, and &lt;code&gt;[...map.values()]&lt;/code&gt; (when the spread elements are at the start of the array literal). He even made &lt;code&gt;Array.from(iterable)&lt;/code&gt; much faster as well. This article explains some of the gory details of his changes, which are included in V8 starting with v7.2.&lt;/p&gt;
&lt;h2 id=&quot;spread-elements&quot;&gt;Spread elements &lt;a class=&quot;bookmark&quot; href=&quot;#spread-elements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Spread elements are components of array literals that have the form &lt;code&gt;...iterable&lt;/code&gt;. They were introduced in ES2015 as a way to create arrays from iterable objects. For example, the array literal &lt;code&gt;[1, ...arr, 4, ...b]&lt;/code&gt; creates an array whose first element is &lt;code&gt;1&lt;/code&gt; followed by the elements of the array &lt;code&gt;arr&lt;/code&gt;, then &lt;code&gt;4&lt;/code&gt;, and finally the elements of the array &lt;code&gt;b&lt;/code&gt;:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; b &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;b&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → [1, 2, 3, 4, 5, 6, 7]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;As another example, any string can be spread to create an array of its characters (Unicode code points):&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; str &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;こんにちは&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;str&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → [&#39;こ&#39;, &#39;ん&#39;, &#39;に&#39;, &#39;ち&#39;, &#39;は&#39;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Similarly, any set can be spread to create an array of its elements, sorted by insertion order:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; s &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;V8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;s&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;TurboFan&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;s&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → [&#39;V8&#39;, &#39;TurboFan&#39;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In general, the spread elements syntax &lt;code&gt;...x&lt;/code&gt; in an array literal assumes that &lt;code&gt;x&lt;/code&gt; provides an iterator (accessible through &lt;code&gt;x[Symbol.iterator]()&lt;/code&gt;). This iterator is then used to obtain the elements to be inserted into the resulting array.&lt;/p&gt;
&lt;p&gt;The simple use case of spreading an array &lt;code&gt;arr&lt;/code&gt; into a new array, without adding any further elements before or behind, &lt;code&gt;[...arr]&lt;/code&gt;, is considered a concise, idiomatic way to shallow-clone &lt;code&gt;arr&lt;/code&gt; in ES2015. Unfortunately, in V8, the performance of this idiom lagged far behind its ES5 counterpart. The goal of Hai’s internship was to change that!&lt;/p&gt;
&lt;h2 id=&quot;why-is-(or-were!)-spread-elements-slow%3F&quot;&gt;Why is (or were!) spread elements slow? &lt;a class=&quot;bookmark&quot; href=&quot;#why-is-(or-were!)-spread-elements-slow%3F&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;There are many ways to shallow-clone an array &lt;code&gt;arr&lt;/code&gt;. For instance, you can use &lt;code&gt;arr.slice()&lt;/code&gt;, or &lt;code&gt;arr.concat()&lt;/code&gt;, or &lt;code&gt;[...arr]&lt;/code&gt;. Or, you can write your own &lt;code&gt;clone&lt;/code&gt; function that employs a standard &lt;code&gt;for&lt;/code&gt;-loop:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Pre-allocate the correct number of elements, to avoid&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// having to grow the array.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ideally, all these options would have similar performance characteristics. Unfortunately, if you pick &lt;code&gt;[...arr]&lt;/code&gt; in V8, it is (or &lt;em&gt;was&lt;/em&gt;) likely to be slower than &lt;code&gt;clone&lt;/code&gt;! The reason is that V8 essentially transpiles &lt;code&gt;[...arr]&lt;/code&gt; into an iteration like the following:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; iterator &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; next &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; iterator&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;next&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; iteratorResult &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; next&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iteratorResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    result&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;iteratorResult&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This code is generally slower than &lt;code&gt;clone&lt;/code&gt; for a few reasons:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;It needs to create the &lt;code&gt;iterator&lt;/code&gt; at the beginning by loading and evaluating the &lt;code&gt;Symbol.iterator&lt;/code&gt; property.&lt;/li&gt;
&lt;li&gt;It needs to create and query the &lt;code&gt;iteratorResult&lt;/code&gt; object at every step.&lt;/li&gt;
&lt;li&gt;It grows the &lt;code&gt;result&lt;/code&gt; array at every step of the iteration by calling &lt;code&gt;push&lt;/code&gt;, thus repeatedly reallocating the backing store.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The reason for using such an implementation is that, as mentioned earlier, spreading can be done not only on arrays but, in fact, on arbitrary &lt;em&gt;iterable&lt;/em&gt; objects, and must follow &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols&quot;&gt;the iteration protocol&lt;/a&gt;. Nevertheless, V8 should be smart enough to recognize if the object being spread is an array such that it can perform the elements extraction at a lower level and thereby:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;avoid the creation of the iterator object,&lt;/li&gt;
&lt;li&gt;avoid the creation of the iterator result objects, and&lt;/li&gt;
&lt;li&gt;avoid continuously growing and thus reallocating the result array (we know the number of elements in advance).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;We implemented this simple idea using &lt;a href=&quot;https://v8.js.cn/blog/csa&quot;&gt;CSA&lt;/a&gt; for &lt;em&gt;fast&lt;/em&gt; arrays, i.e. arrays with one of the six most common &lt;a href=&quot;https://v8.js.cn/blog/elements-kinds&quot;&gt;elements kinds&lt;/a&gt;. The optimization applies for &lt;a href=&quot;https://v8.js.cn/blog/real-world-performance&quot;&gt;the common real-world scenario&lt;/a&gt; where the spread occurs at the start of the array literal, e.g. &lt;code&gt;[...foo]&lt;/code&gt;. As shown in the graph below, this new fast path yields roughly a 3× performance improvement for spreading an array of length 100,000, making it about 25% faster than the hand-written &lt;code&gt;clone&lt;/code&gt; loop.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/spread-elements/spread-fast-array.png&quot; srcset=&quot;https://v8.js.cn/_img/spread-elements/spread-fast-array@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Performance improvement of spreading a fast array&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; While not shown here, the fast path also applies when the spread elements are followed by other components (e.g. &lt;code&gt;[...arr, 1, 2, 3]&lt;/code&gt;), but not when they are preceded by others (e.g. &lt;code&gt;[1, 2, 3, ...arr]&lt;/code&gt;).&lt;/p&gt;
&lt;h2 id=&quot;tread-carefully-down-that-fast-path&quot;&gt;Tread carefully down that fast path &lt;a class=&quot;bookmark&quot; href=&quot;#tread-carefully-down-that-fast-path&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;That’s clearly an impressive speedup, but we must be very careful about when it is correct to take this fast path: JavaScript allows the programmer to modify the iteration behavior of objects (even arrays) in various ways. Because spread elements are specified to use the iteration protocol, we need to ensure that such modifications are respected. We do so by avoiding the fast path completely whenever the original iteration machinery has been mutated. For example, this includes situations like the following.&lt;/p&gt;
&lt;h3 id=&quot;own-symbol.iterator-property&quot;&gt;Own &lt;code&gt;Symbol.iterator&lt;/code&gt; property &lt;a class=&quot;bookmark&quot; href=&quot;#own-symbol.iterator-property&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Normally, an array &lt;code&gt;arr&lt;/code&gt; does not have its own &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-symbol.iterator&quot;&gt;&lt;code&gt;Symbol.iterator&lt;/code&gt;&lt;/a&gt; property, so when looking up that symbol, it will be found on the array’s prototype. In the example below, the prototype is bypassed by defining the &lt;code&gt;Symbol.iterator&lt;/code&gt; property directly on &lt;code&gt;arr&lt;/code&gt; itself. After this modification, looking up &lt;code&gt;Symbol.iterator&lt;/code&gt; on &lt;code&gt;arr&lt;/code&gt; results in an empty iterator, and thus the spread of &lt;code&gt;arr&lt;/code&gt; yields no elements and the array literal evaluates to an empty array.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; next&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; done&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → []&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;modified-%25arrayiteratorprototype%25&quot;&gt;Modified &lt;code&gt;%ArrayIteratorPrototype%&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;#modified-%25arrayiteratorprototype%25&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; method can also be modified directly on &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-%25arrayiteratorprototype%25-object&quot;&gt;&lt;code&gt;%ArrayIteratorPrototype%&lt;/code&gt;&lt;/a&gt;, the prototype of array iterators (which affects all arrays).&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getPrototypeOf&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;Symbol&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;iterator&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; done&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; arr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;arr&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → []&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&quot;dealing-with-holey-arrays&quot;&gt;Dealing with &lt;em&gt;holey&lt;/em&gt; arrays &lt;a class=&quot;bookmark&quot; href=&quot;#dealing-with-holey-arrays&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Extra care is also needed when copying arrays with holes, i.e., arrays like &lt;code&gt;[&#39;a&#39;, , &#39;c&#39;]&lt;/code&gt; that are missing some elements. Spreading such an array, by virtue of adhering to the iteration protocol, does not preserve the holes but instead fills them with the values found in the array’s prototype at the corresponding indices. By default there are no elements in an array’s prototype, which means that any holes are filled with &lt;code&gt;undefined&lt;/code&gt;. For example, &lt;code&gt;[...[&#39;a&#39;, , &#39;c&#39;]]&lt;/code&gt; evaluates to a new array &lt;code&gt;[&#39;a&#39;, undefined, &#39;c&#39;]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Our fast path is smart enough to handle holes in this default situation. Instead of blindly copying the input array’s backing store, it watches out for holes and takes care of converting them to &lt;code&gt;undefined&lt;/code&gt; values. The graph below contains measurements for an input array of length 100,000 containing only (tagged) 600 integers — the rest are holes. It shows that spreading such a holey array is now over 4× faster than using the &lt;code&gt;clone&lt;/code&gt; function. (They used to be roughly on par, but this is not shown in the graph).&lt;/p&gt;
&lt;p&gt;Note that although &lt;code&gt;slice&lt;/code&gt; is included in this graph, the comparison with it is unfair because &lt;code&gt;slice&lt;/code&gt; has a different semantics for holey arrays: it preserves all the holes, so it has much less work to do.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/spread-elements/spread-holey-smi-array.png&quot; srcset=&quot;https://v8.js.cn/_img/spread-elements/spread-holey-smi-array@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Performance improvement of spreading a holey array of integers (&lt;a href=&quot;https://v8.js.cn/blog/elements-kinds&quot;&gt;&lt;code&gt;HOLEY_SMI_ELEMENTS&lt;/code&gt;&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The filling of holes with &lt;code&gt;undefined&lt;/code&gt; that our fast path has to perform is not as simple as it sounds: it may require converting the whole array to a different elements kind. The next graph measures such a situation. The setup is the same as above, except that this time the 600 array elements are unboxed doubles and the array has the &lt;code&gt;HOLEY_DOUBLE_ELEMENTS&lt;/code&gt; elements kind. Since this elements kind cannot hold tagged values such as &lt;code&gt;undefined&lt;/code&gt;, spreading involves a costly elements kind transition, which is why the score for &lt;code&gt;[...a]&lt;/code&gt; is much lower than in the previous graph. Nevertheless, it is still much faster than &lt;code&gt;clone(a)&lt;/code&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/spread-elements/spread-holey-double-array.png&quot; srcset=&quot;https://v8.js.cn/_img/spread-elements/spread-holey-double-array@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Performance improvement of spreading a holey array of doubles (&lt;a href=&quot;https://v8.js.cn/blog/elements-kinds&quot;&gt;&lt;code&gt;HOLEY_DOUBLE_ELEMENTS&lt;/code&gt;&lt;/a&gt;)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;spreading-strings%2C-sets%2C-and-maps&quot;&gt;Spreading strings, sets, and maps &lt;a class=&quot;bookmark&quot; href=&quot;#spreading-strings%2C-sets%2C-and-maps&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The idea of skipping the iterator object and avoiding growing the result array equally applies to spreading other standard data types. Indeed, we implemented similar fast paths for primitive strings, for sets, and for maps, each time taking care to bypass them in the presence of modified iteration behavior.&lt;/p&gt;
&lt;p&gt;Concerning sets, the fast path supports not only spreading a set directly ([...set]), but also spreading its keys iterator (&lt;code&gt;[...set.keys()]&lt;/code&gt;) and its values iterator (&lt;code&gt;[...set.values()]&lt;/code&gt;). In our micro-benchmarks, these operations are now about 18× faster than before.&lt;/p&gt;
&lt;p&gt;The fast path for maps is similar but does not support spreading a map directly (&lt;code&gt;[...map]&lt;/code&gt;), because we consider this an uncommon operation. For the same reason, neither fast path supports the &lt;code&gt;entries()&lt;/code&gt; iterator. In our micro-benchmarks, these operations are now about 14× faster than before.&lt;/p&gt;
&lt;p&gt;For spreading strings (&lt;code&gt;[...string]&lt;/code&gt;), we measured a roughly 5× improvement, as shown in the graph below by the purple and green lines. Note that this is even faster than a TurboFan-optimized for-of-loop (TurboFan understands string iteration and can generate optimized code for it), represented by the blue and pink lines. The reason for having two plots in each case is that the micro-benchmarks operate on two different string representations (one-byte strings and two-byte strings).&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/spread-elements/spread-string.png&quot; srcset=&quot;https://v8.js.cn/_img/spread-elements/spread-string@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Performance improvement of spreading a string&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/spread-elements/spread-set.png&quot; srcset=&quot;https://v8.js.cn/_img/spread-elements/spread-set@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Performance improvement of spreading a set with 100,000 integers (magenta, about 18×), shown here in comparison with a &lt;code&gt;for&lt;/code&gt;-&lt;code&gt;of&lt;/code&gt; loop (red)&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;improving-array.from-performance&quot;&gt;Improving &lt;code&gt;Array.from&lt;/code&gt; performance &lt;a class=&quot;bookmark&quot; href=&quot;#improving-array.from-performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Fortunately, our fast paths for spread elements can be reused for &lt;code&gt;Array.from&lt;/code&gt; in the case where &lt;code&gt;Array.from&lt;/code&gt; is called with an iterable object and without a mapping function, for example, &lt;code&gt;Array.from([1, 2, 3])&lt;/code&gt;. The reuse is possible because in this case, the behavior of &lt;code&gt;Array.from&lt;/code&gt; is exactly the same as that of spreading. It results in an enormous performance improvement, shown below for an array with 100 doubles.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/spread-elements/array-from-array-of-doubles.png&quot; srcset=&quot;https://v8.js.cn/_img/spread-elements/array-from-array-of-doubles@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Performance improvement of &lt;code&gt;Array.from(array)&lt;/code&gt; where &lt;code&gt;array&lt;/code&gt; contains 100 doubles&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8 v7.2 / Chrome 72 greatly improves  the performance of spread elements when they occur at the front of the array literal, for example &lt;code&gt;[...x]&lt;/code&gt; or &lt;code&gt;[...x, 1, 2]&lt;/code&gt;. The improvement applies to spreading arrays, primitive strings, sets, maps keys, maps values, and — by extension — to &lt;code&gt;Array.from(x)&lt;/code&gt;.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>更快的异步函数和 Promise</title>
    <link href="https://v8.js.cn/blog/fast-async"/>
    <updated>2018-11-12T16:45:07+00:00</updated>
    <id>https://v8.js.cn/blog/fast-async</id>
    <author>
      <name>Maya Lekova (@MayaLekova), always-awaiting anticipator, and Benedikt Meurer (@bmeurer), professional performance promiser</name>
    </author>
    <content type="html">&lt;p&gt;JavaScript 中的异步处理历来因其不是特别快而闻名（:p）。更糟糕的是，调试实时 JavaScript 应用程序 - 例如 Node.js 服务器 - 并非易事，尤其是涉及到异步编程时更甚。幸运的是，现在有了一个重大的改变。本文探讨了我们如何在 V8（甚至其它 JavaScript 引擎中）中优化异步函数和 promise，并描述了我们如何改进异步代码的调试体验。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注&lt;/strong&gt;：如果您更喜欢观看演示文稿，请欣赏下面的视频！如果没有，请跳过视频并继续阅读。&lt;/p&gt;
&lt;figure&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/DFP5DKDQfOc&quot; width=&quot;640&quot; height=&quot;360&quot;&gt;&lt;/iframe&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;a-new-approach-to-async-programming&quot;&gt;一种新的异步编程方法 &lt;a class=&quot;bookmark&quot; href=&quot;#a-new-approach-to-async-programming&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;from-callbacks-to-promises-to-async-functions&quot;&gt;从回调到 Promise 到异步函数 &lt;a class=&quot;bookmark&quot; href=&quot;#from-callbacks-to-promises-to-async-functions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在 promise 被加入到 JavaScript 语言之前，异步代码一般使用基于回调的 API，尤其是在 Node.js 中。这是一个例子：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;done&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;validateParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;dbQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; dbResults&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token function&quot;&gt;serviceCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbResults&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; serviceResults&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        &lt;span class=&quot;token function&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; serviceResults&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当嵌套回调变的越来越深以后，我们称这种模式为“回调地狱”，因为它使代码不易读取且难以维护。&lt;/p&gt;
&lt;p&gt;幸运的是，现在 promise 成了 JavaScript 语言的一部分，相同的代码可以以更优雅和可维护的方式编写：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbQuery&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;serviceCall&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; result&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最近，JavaScript 开始支持了 &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/async-functions&quot;&gt;异步函数&lt;/a&gt;。现在可以用与同步代码非常相似的方式编写上述异步代码：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;handler&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;validateParams&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; dbResults &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;dbQuery&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; results &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;serviceCall&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;dbResults&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;results&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; results&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用异步函数，代码变得更加简洁，并且数据流更容易控制，尽管执行仍然是异步的。（请注意，JavaScript 执行仍然发生在一个线程中，这意味着异步函数本身不会创建真实的物理线程。）&lt;/p&gt;
&lt;h3 id=&quot;from-event-listener-callbacks-to-async-iteration&quot;&gt;从事件监听回调到异步迭代器 &lt;a class=&quot;bookmark&quot; href=&quot;#from-event-listener-callbacks-to-async-iteration&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;另一个在 Node.js 中特别常见的异步范例是 &lt;a href=&quot;https://nodejs.org/api/stream.html#stream_readable_streams&quot;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt;。这是一个例子：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEncoding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;data&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;chunk&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    body &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; chunk&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;end&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这段代码有点难以理解：传入的数据只能在回调函数中以 chunks 的方式处理，并且流的结束信号也在回调函数内发生。如果你没有意识到函数其实已经立即终止了，并且必须在回调函数中进行实际处理，那么很容易在这里引入错误。&lt;/p&gt;
&lt;p&gt;幸运的是，一个很酷的新的 ES2018 特性&lt;a href=&quot;http://2ality.com/2016/10/asynchronous-iteration.html&quot;&gt;异步迭代器 async iteration&lt;/a&gt; 可以简化此代码：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; http &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;http&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;http&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;createServer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;req&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; res&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; body &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    req&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setEncoding&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;utf8&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; chunk &lt;span class=&quot;token keyword&quot;&gt;of&lt;/span&gt; req&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;      body &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; chunk&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;body&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;statusCode &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;500&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    res&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;listen&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1337&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在我们不需要将实际处理的逻辑分别放在两个不同的回调函数中 - &lt;code&gt;&#39;data&#39;&lt;/code&gt; 和 &lt;code&gt;&#39;end&#39;&lt;/code&gt;。我们可以把这些都写成一个单一的异步函数来处理，并使用新的 &lt;code&gt;for await…of&lt;/code&gt; 循环来异步的遍历数据块。我们还添加了 &lt;code&gt;try-catch&lt;/code&gt; 块来防止出现 &#39;unhandledRejection&#39; 异常&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn1&quot; id=&quot;fnref1&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;现在已经可以在生产环境中使用这些新函数了！从 &lt;strong&gt;Node.js 8（V8 v6.2 / Chrome 62）开始已经完全支持&lt;/strong&gt;异步函数，并且从 &lt;strong&gt;Node.js 10（V8 v6.8 / Chrome 68）开始已经完全支持&lt;/strong&gt;异步迭代器和生成器！&lt;/p&gt;
&lt;h2 id=&quot;async-performance-improvements&quot;&gt;异步性能改进 &lt;a class=&quot;bookmark&quot; href=&quot;#async-performance-improvements&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;我们已经成功地在 V8 v5.5（Chrome 55 和 Node.js 7）和 V8 v6.8（Chrome 68 和 Node.js 10）之间显着提高了异步代码的性能。我们已经使引擎达到了一定的性能水平，以便开发者可以安全地使用这些新的编程范例，而无需担心速度。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/doxbee-benchmark.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;上图是 &lt;a href=&quot;https://github.com/v8/promise-performance-tests/blob/master/lib/doxbee-async.js&quot;&gt;doxbee benchmark&lt;/a&gt;，它评估了 Promise 的性能。请注意，图表中的执行时间越低意味着性能越好。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/v8/promise-performance-tests/blob/master/lib/parallel-async.js&quot;&gt;parallel benchmark&lt;/a&gt; 的结果则更加强调了 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all&quot;&gt;&lt;code&gt;Promise.all()&lt;/code&gt;&lt;/a&gt; 的性能，更令人兴奋：&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/parallel-benchmark.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;我们设法将 &lt;code&gt;Promise.all&lt;/code&gt; 的性能提高了 &lt;strong&gt;8&lt;/strong&gt; 倍。&lt;/p&gt;
&lt;p&gt;但是，上述基准测试是跑分测试（synthetic micro-benchmarks）。V8 团队对&lt;a href=&quot;https://v8.js.cn/blog/real-world-performance&quot;&gt;真实世界的实际用户代码性能&lt;/a&gt;更感兴趣。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/http-benchmarks.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;上面的图表展示了一些流行的 HTTP 中间件及框架的性能，这些框架大量使用了 Promise 和 &lt;code&gt;async&lt;/code&gt; 函数。请注意，此图表显示了每秒的请求数（requests/second），因此与之前的图表不同，这个图表中，柱状图越高表示越好。这些框架的性能在 Node.js 7（V8 v5.5）和 Node.js 10（V8 v6.8）之间得到了显着提升。&lt;/p&gt;
&lt;p&gt;这些性能改进主要得益于以下三项关键成果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://v8.js.cn/docs/turbofan&quot;&gt;TurboFan&lt;/a&gt;，新的优化编译器 🎉&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://v8.js.cn/blog/orinoco&quot;&gt;Orinoco&lt;/a&gt;，新的垃圾收集器 🚛&lt;/li&gt;
&lt;li&gt;Node.js 8 的 bug，&lt;code&gt;await&lt;/code&gt; 跳过 microticks 🐛&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当我们在 &lt;a href=&quot;https://medium.com/the-node-js-collection/node-js-8-3-0-is-now-available-shipping-with-the-ignition-turbofan-execution-pipeline-aa5875ad3367&quot;&gt;Node.js 8&lt;/a&gt; 中&lt;a href=&quot;https://v8.js.cn/blog/launching-ignition-and-turbofan&quot;&gt;推出TurboFan&lt;/a&gt; 时，全面提升了性能。&lt;/p&gt;
&lt;p&gt;我们一直在研究一种新的垃圾收集器，我们称之为 Orinoco，它可以将垃圾收集工作从主线程中移除，从而显着改善了垃圾收集的请求处理。&lt;/p&gt;
&lt;p&gt;最后，虽然放在后面但是并非不重要，Node.js 8 中有一个 bug 导致 &lt;code&gt;await&lt;/code&gt; 在某些情况下跳过 microticks，从而产生更好的性能。这个 bug 的原因是我们违反了 es 的规范，但它后来给了我们关于优化的灵感。让我们从有缺陷的行为开始：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; p&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;after:await&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;tick:a&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;tick:b&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的程序创建了一个状态为 fulfilled 的 Promise：&lt;code&gt;p&lt;/code&gt;，然后 &lt;code&gt;await&lt;/code&gt; 取得它的结果，与此同时也将后面的 2 个 &lt;code&gt;then&lt;/code&gt; 函数处理程序链接到它上面。您希望以哪种顺序执行 &lt;code&gt;console.log&lt;/code&gt; 调用呢？&lt;/p&gt;
&lt;p&gt;既然 &lt;code&gt;p&lt;/code&gt; 的状态已经是 fulfilled 了，你可能会认为首先打印 &lt;code&gt;&#39;after:await&#39;&lt;/code&gt; 然后再打印 &lt;code&gt;&#39;tick&#39;&lt;/code&gt;。实际上，这是 Node.js 8 中的行为：&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-bug-node-8.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Node.js 8 的 &lt;code&gt;await&lt;/code&gt; bug&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;虽然这种行为看起来很直观，但根据规范它并不正确。Node.js 10 实现了正确的行为，即首先执行链式处理程序，然后继续使用异步函数。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-bug-node-10.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Node.js 10 中不再有 &lt;code&gt;await&lt;/code&gt; 的 bug&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;可以说，这种“正确的行为”其实并不直观，对 JavaScript 开发者来说实际上是令人惊讶的，所以值得做一些解释。在我们深入了解 Promise 和异步函数的神奇之处前，让我们从一些更加基础的情况开始。&lt;/p&gt;
&lt;h3 id=&quot;tasks-vs.-microtasks&quot;&gt;Tasks vs. microtasks &lt;a class=&quot;bookmark&quot; href=&quot;#tasks-vs.-microtasks&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;在高层次上，JavaScript 中有 &lt;em&gt;task&lt;/em&gt; 和 &lt;em&gt;microtask&lt;/em&gt;。task 用于处理 I/O 和计时器等事件，每次执行一个。microtask 为 &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; 和 Promise 实现延迟执行，并在每个 task 结束时执行。在每一个事件循环之前，microtask 队列总是被清空（执行）。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/microtasks-vs-tasks.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;微任务和任务之间的区别&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;更多详细信息，请查看 Jake Archibald 对&lt;a href=&quot;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&quot;&gt;浏览器中的 tasks、microtasks、queues 与 schedules&lt;/a&gt; （&lt;a href=&quot;https://hongfanqie.github.io/tasks-microtasks-queues-and-schedules/&quot;&gt;中文翻译&lt;/a&gt;）的解释。Node.js 中的任务模型与此非常相似。&lt;/p&gt;
&lt;h3 id=&quot;async-functions&quot;&gt;异步函数 &lt;a class=&quot;bookmark&quot; href=&quot;#async-functions&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;根据 MDN，异步函数是一个使用隐式 Promise 异步操作以返回其结果的函数。异步函数旨在使异步代码看起来像同步代码，为开发者隐藏异步处理的一些复杂性。&lt;/p&gt;
&lt;p&gt;最简单的异步函数如下所示：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;computeAnswer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当这个异步函数被调用时，它返回一个 Promise，你可以像任何其他的 Promise 那样获得它的值。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;computeAnswer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → Promise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// prints 42 on the next turn&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;只有 &lt;code&gt;p&lt;/code&gt; 在下次运行 microtask 时才能获得此 Promise 的值。换句话说，上面的程序在语义上等同于对值调用 &lt;code&gt;Promise.resolve&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;computeAnswer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;异步函数的真正威力来自 &lt;code&gt;await&lt;/code&gt; 表达式，它会暂停函数的执行直到 Promise 状态变为 resolved，并在执行后恢复。&lt;code&gt;await&lt;/code&gt; 的值是 Promise 被 fulfilled 的值。这意味着什么？下面是一个示例：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; response &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;await&lt;/code&gt; 暂停了函数 &lt;code&gt;fetchStatus&lt;/code&gt; 的执行，稍后在 &lt;code&gt;fetch&lt;/code&gt; 返回的 Promise 状态变为 fulfilled 时恢复了执行。这或多或少等同于将把处理过程写在 &lt;code&gt;fetch&lt;/code&gt; 返回 Promise 的 &lt;code&gt;then&lt;/code&gt; 链。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetchStatus&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;fetch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;url&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;response &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; response&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;status&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该处理程序在异步函数种包含了 &lt;code&gt;await&lt;/code&gt; 代码。&lt;/p&gt;
&lt;p&gt;通常你会传递 &lt;code&gt;Promise&lt;/code&gt; 给 &lt;code&gt;await&lt;/code&gt;，但你实际上可以等待（await）任意的 JavaScript 值。如果 &lt;code&gt;await&lt;/code&gt; 后面的表达式的值不是 Promise，则将其转换为 Promise。这意味着你可以这样写 &lt;code&gt;await 42&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; v &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; p &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → Promise&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;p&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;log&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// prints `42` eventually&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;更有趣的是，&lt;code&gt;await&lt;/code&gt; 可以使用任何 &lt;a href=&quot;https://promisesaplus.com/&quot;&gt;“thenable”&lt;/a&gt;，即任何带有 &lt;code&gt;then&lt;/code&gt; 方法的对象，即使它不是真正的 Promise。因此，您可以实现有趣的事情，例如测量实际 sleep 时间的异步 sleep 功能：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Sleep&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;constructor&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;timeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; timeout&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;then&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;resolve&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; reject&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; startTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token function&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;Date&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;now&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; startTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;               &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;timeout&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; actualTime &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Sleep&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;actualTime&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，让我们看看 V8 引擎底层是如何实现 &lt;code&gt;await&lt;/code&gt; &lt;a href=&quot;https://tc39.github.io/ecma262/#await&quot;&gt;规范&lt;/a&gt;的。这是一个简单的异步函数 &lt;code&gt;foo&lt;/code&gt;：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; w &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; v&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; w&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当函数调用时，它会将参数 &lt;code&gt;v&lt;/code&gt; 包装为 Promise 并暂停执行异步函数，直到该 Promise 的状态变为 resolved。一旦发生这种情况，函数的执行将恢复并且这个 fulfilled 的 Promise 的值被赋值给 &lt;code&gt;w&lt;/code&gt;。然后从异步函数中返回此值。&lt;/p&gt;
&lt;h3 id=&quot;await-under-the-hood&quot;&gt;引擎底层的 &lt;code&gt;await&lt;/code&gt; &lt;a class=&quot;bookmark&quot; href=&quot;#await-under-the-hood&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;首先，V8 将此函数标记为可恢复（&lt;em&gt;resumable&lt;/em&gt;），这意味着可以暂停执行并稍后恢复执行（在 &lt;code&gt;await&lt;/code&gt; 处）。然后它创建所谓的 &lt;code&gt;implicit_promise&lt;/code&gt;（隐式 Promise），这是在调用异步函数时返回的 Promise，并最终解析（resolve）为异步函数生成的值。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-under-the-hood.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;简单的异步函数与引擎转换之后的代码之间的比较&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;然后是有趣的一点：实际的 &lt;code&gt;await&lt;/code&gt;。首先，传递给 &lt;code&gt;await&lt;/code&gt; 的值被包裹在一个 Promise 中。然后，处理程序附加到这个包装的 Promise，以便在 Promise 变为 fulfilled 后恢复该函数，并且暂停执行异步函数，并将 &lt;code&gt;implicit_promise&lt;/code&gt; 返回给调用者。一旦 &lt;code&gt;promise&lt;/code&gt; 变为 fulfilled，恢复异步函数的执行，并将 &lt;code&gt;promise&lt;/code&gt; 的值赋值给 &lt;code&gt;w&lt;/code&gt;，而且这个 &lt;code&gt;w&lt;/code&gt; 也是 &lt;code&gt;implicit_promise&lt;/code&gt; 被 resolved 后的值。&lt;/p&gt;
&lt;p&gt;简而言之，&lt;code&gt;await v&lt;/code&gt; 的最初的执行步骤是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 &lt;code&gt;v&lt;/code&gt; 转换为 Promise- &lt;code&gt;v&lt;/code&gt; 代表传递给 &lt;code&gt;await&lt;/code&gt; 的值。&lt;/li&gt;
&lt;li&gt;给 Promise 附加处理程序以便稍后恢复异步函数。&lt;/li&gt;
&lt;li&gt;挂起异步函数并返回 &lt;code&gt;implicit_promise&lt;/code&gt; 给调用者。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;让我们一步一步地完成各个操作。假设传递给 &lt;code&gt;await&lt;/code&gt; 的内容已经是一个 Promise，而它的 fulfilled 的值是 &lt;code&gt;42&lt;/code&gt;。随后 V8 引擎又创建一个新的 &lt;code&gt;promise&lt;/code&gt; 并对 &lt;code&gt;await&lt;/code&gt; 后面的 Promise 执行 resolve 操作从而取出值。这确实推迟了下一轮的 Promise 处理链，这些被定义在规范中的 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promiseresolvethenablejob&quot;&gt;&lt;code&gt;PromiseResolveThenableJob&lt;/code&gt;&lt;/a&gt;。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-step-1.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;然后引擎创造了另一个所谓的 &lt;code&gt;throwaway&lt;/code&gt; Promise。它被称为 &lt;em&gt;throwaway&lt;/em&gt;，因为它的 &lt;code&gt;then&lt;/code&gt; 链没有任何处理程序 - 它完全在引擎内部。此 &lt;code&gt;throwaway&lt;/code&gt; 然后被链接到 &lt;code&gt;promise&lt;/code&gt;，使用适当的处理程序来恢复异步函数。这个 &lt;code&gt;performPromiseThen&lt;/code&gt; 操作基本上就是 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&quot;&gt;&lt;code&gt;Promise.prototype.then()&lt;/code&gt;&lt;/a&gt; 的幕后操作。最后，暂停执行异步函数，并且控制权返回给调用者。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-step-2.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;调用者继续执行，最终调用栈变空。然后 JavaScript 引擎开始运行 microtask：它运行之前安排的计划任务 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promiseresolvethenablejob&quot;&gt;&lt;code&gt;PromiseResolveThenableJob&lt;/code&gt;&lt;/a&gt;，该计划任务又安排了新的 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promisereactionjob&quot;&gt;&lt;code&gt;PromiseReactionJob&lt;/code&gt;&lt;/a&gt;，作为 &lt;code&gt;await&lt;/code&gt; 之后的 Promise 的处理链。然后，引擎返回并处理 microtask 队列，因为在继续主事件循环之前必须清空 microtask 队列。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-step-3.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;接下来是 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promisereactionjob&quot;&gt;&lt;code&gt;PromiseReactionJob&lt;/code&gt;&lt;/a&gt;，它将 &lt;code&gt;promise&lt;/code&gt; 设置为状态 fulfilled，其值是我们正在 &lt;code&gt;await&lt;/code&gt; 的 Promise 值 - 在这个例子中是 &lt;code&gt;42&lt;/code&gt; - 并且将计划任务链到 &lt;code&gt;throwaway&lt;/code&gt; Promise。然后引擎再次返回 microtask 循环，其中包含要处理的最终 microtask。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-step-4-final.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;现在这第二个 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promisereactionjob&quot;&gt;&lt;code&gt;PromiseReactionJob&lt;/code&gt;&lt;/a&gt; 将 resove 的值传播到 &lt;code&gt;throwaway&lt;/code&gt; promise，并恢复异步函数的执行，&lt;code&gt;await&lt;/code&gt; 的返回值为 &lt;code&gt;42&lt;/code&gt;。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-overhead.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;&lt;code&gt;await&lt;/code&gt; 的开销&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;总结一下，每个 &lt;code&gt;await&lt;/code&gt; 引擎必须创建&lt;strong&gt;两个额外&lt;/strong&gt;的 Promise（即使右侧已经是一个 Promis）并且它需要&lt;strong&gt;至少三个&lt;/strong&gt; microtask 队列 ticks。谁会意识到仅仅是一个 &lt;code&gt;await&lt;/code&gt; 表达就导致了如此之多的开销？！&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-code-before.svg&quot; alt=&quot;&quot; width=&quot;400&quot; height=&quot;191&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;我们来看看这些开销来自哪里。第一行创建了 Promise 包装器。第二行立即使用 &lt;code&gt;await&lt;/code&gt; 解析 Promise 包装器 &lt;code&gt;v&lt;/code&gt; 的值。这两行导致了另外一个额外的 Promise 和三个 microtick 中的两个。如果 &lt;code&gt;v&lt;/code&gt; 已经是一个 Promise（这是常见的情况，因为应用程序通常会在 Promise 上调用 &lt;code&gt;await&lt;/code&gt;），这是非常昂贵的。在开发者不常使用的情况下，例如 &lt;code&gt;await 42&lt;/code&gt;，引擎仍然需要为其创建 Promise 包装器。&lt;/p&gt;
&lt;p&gt;事实证明，规范中已经有一个 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promise-resolve&quot;&gt;&lt;code&gt;promiseResolve&lt;/code&gt;&lt;/a&gt; 操作，此操作只在需要时执行包装器：&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-code-comparison.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;此操作返回没有修改过的 promise，并且只在必要时将其值包装到 promise 中。当传递给 &lt;code&gt;await&lt;/code&gt; 的值已经是一个 Promise 时，这可以节省其中一个额外的 promise，加上 microtick 队列上的两个 tick。从 V8 v7.1 开始，该行为可以通过 V8 的命令行参数 &lt;code&gt;--harmony-await-optimization&lt;/code&gt; 开启。我们也提交了对 &lt;a href=&quot;https://github.com/tc39/ecma262/pull/1250&quot;&gt;proposed this change to the ECMAScript specification&lt;/a&gt; 的变更；一旦我们确定它与 Web 兼容，这个补丁就会合并到提案中。&lt;/p&gt;
&lt;p&gt;以下是在引擎底层对 &lt;code&gt;await&lt;/code&gt; 的改进，其按步执行的工作方式如下：&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-new-step-1.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;让我们再次假设我们 &lt;code&gt;await&lt;/code&gt; 后面的 Promise 返回了 &lt;code&gt;42&lt;/code&gt;。感谢 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promise-resolve&quot;&gt;&lt;code&gt;promiseResolve&lt;/code&gt;&lt;/a&gt; 带来的魔法，现在 &lt;code&gt;promise&lt;/code&gt; 指向了同一个 Promise &lt;code&gt;v&lt;/code&gt;，所以这个步骤什么也不需要做。然后引擎继续像以前一样，创建 &lt;code&gt;throwaway&lt;/code&gt; Promise，安排 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promisereactionjob&quot;&gt;&lt;code&gt;PromiseReactionJob&lt;/code&gt;&lt;/a&gt; 在 microtask 队列的下一个 tick 上恢复异步函数，暂停执行该函数，然后返回给调用者。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-new-step-2.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;最终当所有 JavaScript 执行完成时，引擎开始运行 microtask，因此它执行 &lt;a href=&quot;https://tc39.github.io/ecma262/#sec-promisereactionjob&quot;&gt;&lt;code&gt;PromiseReactionJob&lt;/code&gt;&lt;/a&gt;。这个过程将 &lt;code&gt;promise&lt;/code&gt; 传播到 &lt;code&gt;throwaway&lt;/code&gt;，并恢复异步函数的执行，为 &lt;code&gt;await&lt;/code&gt; 得到 &lt;code&gt;42&lt;/code&gt;。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-overhead-removed.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;节省了执行 &lt;code&gt;await&lt;/code&gt; 的开销&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;如果传递给 &lt;code&gt;await&lt;/code&gt; 的值已经是一个 Promise，那么这种优化避免了再次创建 Promise 包装器，在这种情况下，我们从&lt;strong&gt;最少三个&lt;/strong&gt; microtick 到&lt;strong&gt;只有一个&lt;/strong&gt; microtick。这种行为类似于 Node.js 8 所做的，但是现在它不再是一个 bug - 它现在是一个正在标准化的优化！&lt;/p&gt;
&lt;p&gt;虽然 &lt;code&gt;throwaway&lt;/code&gt; 只是在 V8 引擎内部使用，但引擎必须创造这种 Promise。事实证明，&lt;code&gt;throwaway&lt;/code&gt; Promise 只是为了满足 &lt;code&gt;performPromiseThen&lt;/code&gt; 规范中内部操作的 API 约束。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/await-optimized.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;最近在 ECMAScript 规范的&lt;a href=&quot;https://github.com/tc39/ecma262/issues/694&quot;&gt;编辑性更改&lt;/a&gt;中解决了这个问题。引擎不再需要为 &lt;code&gt;await&lt;/code&gt; 创造 &lt;code&gt;throwaway&lt;/code&gt; Promise - 在绝大部分时间&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn2&quot; id=&quot;fnref2&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/node-10-vs-node-12.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;&lt;code&gt;await&lt;/code&gt; 优化之前和之后的比较&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;同 Node.js 10 的 &lt;code&gt;await&lt;/code&gt; 对比，在 Node.js 12 中做了更进一步的优化，下图显示了此更改对性能的影响：&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/benchmark-optimization.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; 现在优于手写的 Promise 代码&lt;/strong&gt;。这里的关键点是，我们通过修补规范&lt;sup class=&quot;footnote-ref&quot;&gt;&lt;a href=&quot;#fn3&quot; id=&quot;fnref3&quot;&gt;[3]&lt;/a&gt;&lt;/sup&gt;，大大减少了异步函数的开销 - 不仅在 V8 中，而且在所有 JavaScript 引擎中。&lt;/p&gt;
&lt;h2 id=&quot;improved-developer-experience&quot;&gt;改善开发者体验 &lt;a class=&quot;bookmark&quot; href=&quot;#improved-developer-experience&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;除了性能之外，JavaScript 开发者还关心诊断和修复 bug 的能力，这在处理异步代码时通常会更加困难。&lt;a href=&quot;https://developers.google.com/web/tools/chrome-devtools&quot;&gt;Chrome DevTools&lt;/a&gt; 支持异步堆栈跟踪，即堆栈跟踪不仅包括堆栈的当前同步部分，还包括异步部分：&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/fast-async/devtools.png&quot; srcset=&quot;https://v8.js.cn/_img/fast-async/devtools@2x.png 2x&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;这是本地开发过程中非常有用的功能。但是，一旦部署了应用程序，这种方法并没有真正帮助您。在线上调试期间，您只会在日志文件中看到 &lt;code&gt;Error#stack&lt;/code&gt; 输出，并且不会告诉您有关异步部分的任何信息。&lt;/p&gt;
&lt;p&gt;我们最近一直在研究&lt;a href=&quot;https://bit.ly/v8-zero-cost-async-stack-traces&quot;&gt;零成本的异步堆栈跟踪&lt;/a&gt;，它为异步函数调用提供了更丰富的 &lt;code&gt;Error#stack&lt;/code&gt; 属性。“零成本”听起来令人兴奋，不是吗？当 Chrome DevTools 特性带来重大开销时，如何才能实现零成本？考虑这个 &lt;code&gt;foo&lt;/code&gt; 异步调用 &lt;code&gt;bar&lt;/code&gt; 的例子，而且 &lt;code&gt;bar&lt;/code&gt; 在 &lt;code&gt;await&lt;/code&gt; 的 Promise 之后抛出异常：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;async&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;await&lt;/span&gt; Promise&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;BEEP BEEP&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token function&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;catch&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;error&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stack&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Node.js 8 或 Node.js 10 中运行此代码会产生以下输出：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ node index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Error: BEEP BEEP&lt;/span&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    at bar (index.js:8:9)&lt;/mark&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at process._tickCallback (internal/process/next_tick.js:68:7)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at Function.Module.runMain (internal/modules/cjs/loader.js:745:11)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at startup (internal/bootstrap/node.js:266:19)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at bootstrapNodeJSCore (internal/bootstrap/node.js:595:3)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请注意，虽然调用 &lt;code&gt;foo()&lt;/code&gt; 导致错误，但 &lt;code&gt;foo&lt;/code&gt; 根本不是堆栈跟踪的一部分。这使得 JavaScript 开发者执行事后调试变得棘手，无论您的代码是部署在 Web 应用程序中还是部署在云容器内部。&lt;/p&gt;
&lt;p&gt;这里有趣的是，引擎知道 &lt;code&gt;bar&lt;/code&gt; 调用完成时它继续执行的位置：在 &lt;code&gt;foo&lt;/code&gt; 函数的 &lt;code&gt;await&lt;/code&gt; 之后。巧合的是，这也是函数 &lt;code&gt;foo&lt;/code&gt; 暂停的地方。引擎可以使用此信息来重建异步堆栈跟踪的部分，即 &lt;code&gt;await&lt;/code&gt; 现场。通过此更改，输出变为：&lt;/p&gt;
&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;$ node --async-stack-traces index.js&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Error: BEEP BEEP&lt;/span&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    at bar (index.js:8:9)&lt;/mark&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at process._tickCallback (internal/process/next_tick.js:68:7)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at Function.Module.runMain (internal/modules/cjs/loader.js:745:11)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at startup (internal/bootstrap/node.js:266:19)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    at bootstrapNodeJSCore (internal/bootstrap/node.js:595:3)&lt;/span&gt;&lt;br&gt;&lt;mark class=&quot;highlight-line highlight-line-active&quot;&gt;    at async foo (index.js:2:3)&lt;/mark&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在堆栈跟踪中，最顶层的函数首先出现，然后是同步堆栈跟踪的其余部分，然后是 &lt;code&gt;bar&lt;/code&gt; 函数的异步调用 &lt;code&gt;foo&lt;/code&gt;。此更改在 V8 中使用 &lt;code&gt;--async-stack-traces&lt;/code&gt; 标志开启。&lt;/p&gt;
&lt;p&gt;但是，如果将此与上面 Chrome DevTools 中的异步堆栈跟踪进行比较，您会注意到 &lt;code&gt;foo&lt;/code&gt; 堆栈跟踪的异步部分中缺少实际的调用现场。如前所述，这种方法利用了一个事实，&lt;code&gt;await&lt;/code&gt; 即恢复和暂停位置是相同的 - 但对于常规 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&quot;&gt;&lt;code&gt;Promise#then()&lt;/code&gt;&lt;/a&gt; 或 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch&quot;&gt;&lt;code&gt;Promise#catch()&lt;/code&gt;&lt;/a&gt; 调用，情况并非如此。有关更多背景信息，请参阅 Mathias Bynens 对&lt;a href=&quot;https://mathiasbynens.be/notes/async-stack-traces&quot;&gt;why &lt;code&gt;await&lt;/code&gt; beats &lt;code&gt;Promise#then()&lt;/code&gt;&lt;/a&gt; 的解释。&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;结论 &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;由于两个重要的优化，我们使异步函数更快：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;删除两个额外的 microtick，和&lt;/li&gt;
&lt;li&gt;去除了 &lt;code&gt;throwaway&lt;/code&gt; promise。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最重要的是，我们通过&lt;a href=&quot;https://bit.ly/v8-zero-cost-async-stack-traces&quot;&gt;零成本异步堆栈跟踪&lt;/a&gt;改进了开发体验，这些可以使用在异步函数的 &lt;code&gt;await&lt;/code&gt; 表达式和异步函数中使用 &lt;code&gt;Promise.all()&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;我们还为 JavaScript 开发者提供了一些很好的性能建议：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 &lt;code&gt;async&lt;/code&gt; 函数和 &lt;code&gt;await&lt;/code&gt; 替代手写的 Promise 代码，以及&lt;/li&gt;
&lt;li&gt;坚持 JavaScript 引擎提供的原生 Promise 实现，以避免在 &lt;code&gt;await&lt;/code&gt; 中使用额外的两个 microtick。&lt;/li&gt;
&lt;/ul&gt;
&lt;hr class=&quot;footnotes-sep&quot;&gt;
&lt;section class=&quot;footnotes&quot;&gt;
&lt;ol class=&quot;footnotes-list&quot;&gt;
&lt;li id=&quot;fn1&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;感谢 &lt;a href=&quot;https://twitter.com/matteocollina&quot;&gt;Matteo Collina&lt;/a&gt; 为此提交的 &lt;a href=&quot;https://github.com/mcollina/make-promises-safe/blob/master/README.md#the-unhandledrejection-problem&quot;&gt;issue&lt;/a&gt;. &lt;a href=&quot;#fnref1&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn2&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;如果在 Node.js 中使用 &lt;a href=&quot;https://nodejs.org/api/async_hooks.html&quot;&gt;&lt;code&gt;async_hooks&lt;/code&gt;&lt;/a&gt;，V8 仍然需要创建 &lt;code&gt;throwaway&lt;/code&gt;，因为 &lt;code&gt;before&lt;/code&gt; 和 &lt;code&gt;after&lt;/code&gt; 钩子需要在 &lt;code&gt;throwaway&lt;/code&gt; 的 promise &lt;em&gt;上下文中&lt;/em&gt;运行。 &lt;a href=&quot;#fnref2&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id=&quot;fn3&quot; class=&quot;footnote-item&quot;&gt;&lt;p&gt;如上所述，&lt;a href=&quot;https://github.com/tc39/ecma262/pull/1250&quot;&gt;此补丁&lt;/a&gt;尚未合并到 ECMAScript 规范中。一旦我们确保此改变不会破坏网络，我们的计划就是马上执行。 &lt;a href=&quot;#fnref3&quot; class=&quot;footnote-backref&quot;&gt;↩︎&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/section&gt;
</content>
  </entry>
  
  <entry>
    <title>V8 v7.1 发布</title>
    <link href="https://v8.js.cn/blog/v8-release-71"/>
    <updated>2018-10-31T15:44:37+00:00</updated>
    <id>https://v8.js.cn/blog/v8-release-71</id>
    <author>
      <name>Stephan Herhut (@herhut), cloned cloner of clones</name>
    </author>
    <content type="html">&lt;p&gt;每六周，我们会按照 &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;V8 的发布流程&lt;/a&gt;创建一个新的 V8 分支。在进入 Chrome Beta 里程碑之前，此版本从 V8 的 master 分支创建出来。今天我们很高兴地宣布当前最新的分支异常创建出来了，&lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.1&quot;&gt;V8 version 7.1&lt;/a&gt;，它将在几个星期内与 Chrome 71 Stable 同时发布。V8 v7.1 包含了各种面向开发者的新特性。这篇文章提供了预期发布的一些功能亮点。&lt;/p&gt;
&lt;h2 id=&quot;memory&quot;&gt;内存 &lt;a class=&quot;bookmark&quot; href=&quot;#memory&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在 v6.9/v7.0 中&lt;a href=&quot;https://v8.js.cn/blog/embedded-builtins&quot;&gt;将内置函数直接以二进制方式嵌入&lt;/a&gt;后，解释器的字节码处理程序现在也&lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=8068&quot;&gt;嵌入到二进制文件中&lt;/a&gt;。每个 Isolate 平均节省大约 200 KB。&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;性能 &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;TurboFan 中的逃逸分析（对局部作用域的对象执行标量替换）得到了改进，当来自周围上下文的变量转移到本地闭包时，它还能够&lt;a href=&quot;https://bit.ly/v8-turbofan-context-sensitive-js-operators&quot;&gt;处理高阶函数的局部函数上下文&lt;/a&gt;。请考虑以下示例：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;mapAdd&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;y &lt;span class=&quot;token operator&quot;&gt;=&gt;&lt;/span&gt; y &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; x&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;注意，这里的 &lt;code&gt;x&lt;/code&gt; 是局部作用域闭包 &lt;code&gt;y =&amp;gt; y + x&lt;/code&gt; 的自由变量。V8 v7.1 现在可以完全忽略上下文中分配的 &lt;code&gt;x&lt;/code&gt;，在某些情况下可以提高 40%。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-release-71/improved-escape-analysis.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;通过新的逃逸分析提升性能（越低越好）&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;逃逸分析现在还能够消除使用变量作为索引访问局部数据的行为。下面是一个例子：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;...&lt;/span&gt;args&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; total &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    total &lt;span class=&quot;token operator&quot;&gt;+=&lt;/span&gt; args&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; total&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;x&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; y&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;请注意，&lt;code&gt;args&lt;/code&gt; 是 &lt;code&gt;sum2&lt;/code&gt; 的局部变量（假设 &lt;code&gt;sum&lt;/code&gt; 被内联进了 &lt;code&gt;sum2&lt;/code&gt;）。在 V8 v7.1 中，TurboFan 现在可以把 &lt;code&gt;args&lt;/code&gt; 完全消除，并使用三元操作 &lt;code&gt;i === 0 ? x : y&lt;/code&gt; 替换变量索引访问操作 &lt;code&gt;args[i]&lt;/code&gt;。在使用 JetStream/EarleyBoyer 进行基准测试时，性能提高了约 2%。我们将来会继续扩展此优化，使具有两个以上元素的数组也可以进行类似优化。&lt;/p&gt;
&lt;h2 id=&quot;structured-cloning-of-wasm-modules&quot;&gt;Wasm modules 的结构化克隆 &lt;a class=&quot;bookmark&quot; href=&quot;#structured-cloning-of-wasm-modules&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;最后，&lt;a href=&quot;https://github.com/WebAssembly/design/pull/1074&quot;&gt;&lt;code&gt;postMessage&lt;/code&gt; is supported for Wasm modules&lt;/a&gt;。&lt;code&gt;WebAssembly.Module&lt;/code&gt; 对象现在可以被 &lt;code&gt;postMessage&lt;/code&gt; 发送到 web workers。为了更加清晰，这仅限于 web workers（相同的进程，不同的线程），而不能扩展到跨进程场景（例如跨域(cross-origin) &lt;code&gt;postMessage&lt;/code&gt; 或 shared web workers）。&lt;/p&gt;
&lt;h2 id=&quot;javascript-language-features&quot;&gt;JavaScript 语言新特性 &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-language-features&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47417391&quot;&gt;&lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt; API&lt;/a&gt; 可以让我们处理相对时间的本地化格式（例如，“昨天”，“42秒前”或“3个月”），而不牺牲性能。下面是一个例子：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 创建一个本地化相对时间，中文&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; rtf &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Intl&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;RelativeTimeFormat&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;zh&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; numeric&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;auto&#39;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;rtf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;day&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;昨天&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;rtf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;day&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;今天&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;rtf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;day&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;明天&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;rtf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;week&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;上周&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;rtf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;week&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;本周&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;rtf&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;week&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → &#39;下周&#39;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;有关 &lt;code&gt;Intl.RelativeTimeFormat&lt;/code&gt; 的更多信息，请阅读 Google Web Fundamentals 的 &lt;a href=&quot;https://developers.google.com/web/updates/2018/10/intl-relativetimeformat&quot;&gt;The Intl.RelativeTimeFormat API&lt;/a&gt; 文章，中文翻译版&lt;a href=&quot;https://zhuanlan.zhihu.com/p/47417391&quot;&gt;国际化相对时间格式化API：Intl.RelativeTimeFormat&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;V8 v7.1 还增加了对 &lt;a href=&quot;https://github.com/tc39/proposal-global&quot;&gt;&lt;code&gt;globalThis&lt;/code&gt; 提案&lt;/a&gt;的支持，此提案提供了访问全局对象的通用机制，即使在严格模式的函数或模块中，而不管平台如何。&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;请使用 &lt;code&gt;git log branch-heads/7.0..branch-heads/7.1 include/v8.h&lt;/code&gt; 获取 API 的变更列表。&lt;/p&gt;
&lt;p&gt;开发者可以使用 &lt;code&gt;git checkout -b 7.1 -t branch-heads/7.1&lt;/code&gt; 来使用 V8 v7.1 中的实验性新功能，具体请参阅&lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;使用 Git 获取 V8 源码&lt;/a&gt;。或者，您可以订阅 &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;Chrome 的 Beta 频道&lt;/a&gt; 来尽快尝试新功能。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>V8 release v7.0</title>
    <link href="https://v8.js.cn/blog/v8-release-70"/>
    <updated>2018-10-15T17:17:00+00:00</updated>
    <id>https://v8.js.cn/blog/v8-release-70</id>
    <author>
      <name>Michael Hablich</name>
    </author>
    <content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://github.com/v8/v8/wiki/Release-Process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/7.0&quot;&gt;V8 version 7.0&lt;/a&gt;, which is in beta until its release in coordination with Chrome 70 Stable in several weeks. V8 v7.0 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;embedded-built-ins&quot;&gt;Embedded built-ins &lt;a class=&quot;bookmark&quot; href=&quot;#embedded-built-ins&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/blog/embedded-builtins&quot;&gt;Embedded builtins&lt;/a&gt; save memory by sharing generated code across multiple V8 Isolates. Starting with V8 v6.9, we enabled embedded builtins on x64. V8 v7.0 brings these memory savings to all remaining platforms except ia32.&lt;/p&gt;
&lt;h2 id=&quot;a-preview-of-webassembly-threads&quot;&gt;A preview of WebAssembly Threads &lt;a class=&quot;bookmark&quot; href=&quot;#a-preview-of-webassembly-threads&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;WebAssembly (Wasm) enables compilation of code written in C++ and other languages to run on the web. One very useful feature of native applications is the ability to use threads — a primitive for parallel computation. Most C and C++ developers would be familiar with pthreads, which is a standardized API for application thread management.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://www.w3.org/community/webassembly/&quot;&gt;WebAssembly Community Group&lt;/a&gt; has been working on bringing threads to the web to enable real multi-threaded applications. As part of this effort, V8 has implemented necessary support for threads in the WebAssembly engine. To use this feature in Chrome, you can enable it via &lt;code&gt;chrome://flags/#enable-webassembly-threads&lt;/code&gt;, or your site can sign up for an &lt;a href=&quot;https://github.com/GoogleChrome/OriginTrials&quot;&gt;Origin Trial&lt;/a&gt;. Origin Trials allow developers to experiment with new web features before they are fully standardized, and that helps us gather real-world feedback which is critical to validate and improve new features.&lt;/p&gt;
&lt;h2 id=&quot;javascript-language-features&quot;&gt;JavaScript language features &lt;a class=&quot;bookmark&quot; href=&quot;#javascript-language-features&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.github.io/proposal-Symbol-description/&quot;&gt;A &lt;code&gt;description&lt;/code&gt; property&lt;/a&gt; is being added to &lt;code&gt;Symbol.prototype&lt;/code&gt;. This provides a more ergonomic way of accessing the description of a &lt;code&gt;Symbol&lt;/code&gt;. Previously, the description could be only be accessed indirectly through &lt;code&gt;Symbol.prototype.toString()&lt;/code&gt;. Thanks to Igalia for contributing this implementation!&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.sort&lt;/code&gt; is now stable in V8 v7.0. Previously, V8 used an unstable QuickSort for arrays with more than 10 elements. Now, we use the stable TimSort algorithm. See &lt;a href=&quot;https://v8.js.cn/blog/array-sort&quot;&gt;our blog post&lt;/a&gt; for more details.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/6.9..branch-heads/7.0 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://github.com/v8/v8/wiki/Using-Git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 7.0 -t branch-heads/7.0&lt;/code&gt; to experiment with the new features in V8 v7.0. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Getting things sorted in V8</title>
    <link href="https://v8.js.cn/blog/array-sort"/>
    <updated>2018-09-28T11:20:37+00:00</updated>
    <id>https://v8.js.cn/blog/array-sort</id>
    <author>
      <name>Simon Zünd (@nimODota), consistent comparator</name>
    </author>
    <content type="html">&lt;p&gt;&lt;code&gt;Array.prototype.sort&lt;/code&gt; was among the last builtins implemented in self-hosted JavaScript in V8. Porting it offered us the opportunity to experiment with different algorithms and implementation strategies and finally &lt;a href=&quot;https://mathiasbynens.be/demo/sort-stability&quot;&gt;make it stable&lt;/a&gt; in V8 v7.0 / Chrome 70.&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;bookmark&quot; href=&quot;#background&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Sorting in JavaScript is hard. This blog post looks at some of the quirks in the interaction between a sorting algorithm and the JavaScript language, and describes our journey to move V8 to a stable algorithm and make performance more predictable.&lt;/p&gt;
&lt;p&gt;When comparing different sorting algorithms we look at their worst and average performance given as a bound on the asymptotic growth (i.e. “Big O” notation) of either memory operations or number of comparisons. Note that in dynamic languages, such as JavaScript, a comparison operation is usually a magnitude more expensive than a memory access. This is due to the fact that comparing two values while sorting usually involves calls to user code.&lt;/p&gt;
&lt;p&gt;Let’s take a look at a simple example of sorting some numbers into ascending order based on a user-provided comparison function. A &lt;em&gt;consistent&lt;/em&gt; comparison function returns &lt;code&gt;-1&lt;/code&gt; (or any other negative value), &lt;code&gt;0&lt;/code&gt;, or &lt;code&gt;1&lt;/code&gt; (or any other positive value) when the two provided values are either smaller, equal, or greater respectively. A comparison function that does not follow this pattern is &lt;em&gt;inconsistent&lt;/em&gt; and can have arbitrary side-effects, such as modifying the array it’s intended to sort.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;compare&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;a&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token comment&quot;&gt;// Arbitrary code goes here, e.g. `array.push(1);`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; a &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; b&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// A “typical” sort call.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;compare&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Even in the next example, calls to user code may happen. The “default” comparison function calls &lt;code&gt;toString&lt;/code&gt; on both values and does a lexicographical comparison on the string representations.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token function&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// Arbitrary code goes here, e.g. `array.push(1);`.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;42&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Sort without a comparison function.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;accessors-prototype&quot;&gt;More fun with accessors and prototype-chain interactions &lt;a class=&quot;bookmark&quot; href=&quot;#accessors-prototype&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;This is the part where we leave the spec behind and venture into “implementation-defined” behavior land. The spec has a whole list of conditions that, when met, allow the engine to sort the object/array as it sees fit — or not at all. Engines still have to follow some ground rules but everything else is pretty much up in the air. On the one hand, this gives engine developers the freedom to experiment with different implementations. On the other hand, users expect some reasonable behavior even though the spec doesn’t require there to be any. This is further complicated by the fact that “reasonable behavior” is not always straightforward to determine.&lt;/p&gt;
&lt;p&gt;This section shows that there are still some aspects of &lt;code&gt;Array#sort&lt;/code&gt; where engine behavior differs greatly. These are hard edge cases, and as mentioned above it’s not always clear what “the right thing to do” actually is. We &lt;em&gt;highly&lt;/em&gt; recommend not writing code like this; engines won’t optimize for it.&lt;/p&gt;
&lt;p&gt;The first example shows an array with some accessors (i.e. getters and setters) and a “call log” in different JavaScript engines. Accessors are the first case where the resulting sort order is implementation-defined:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;get 0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;set 0&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Object&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;defineProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;get 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;v&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;set 1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Here’s the output of that snippet in various engines. Note that there are no “right” or “wrong” answers here — the spec leaves this up to the implementation!&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Chakra
get 0
get 1
set 0
set 1

// JavaScriptCore
get 0
get 1
get 0
get 0
get 1
get 1
set 0
set 1

// V8
get 0
get 0
get 1
get 1
get 1
get 0

#### SpiderMonkey
get 0
get 1
set 0
set 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The next example shows interactions with the prototype chain. For the sake of brevity we don’t show the call log.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; object &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; __proto__&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   length&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;10000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;e2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;2000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;8000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token number&quot;&gt;12000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;XX&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   __proto__&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;e3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;f3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;     &lt;span class=&quot;token number&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;   &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;Array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;sort&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;object&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The output shows the &lt;code&gt;object&lt;/code&gt; after it’s sorted. Again, there is no right answer here. This example just shows how weird the interaction between indexed properties and the prototype chain can get:&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// Chakra&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;e3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// JavaScriptCore&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;e3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// V8&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;e3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// SpiderMonkey&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;a2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;a3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;c2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d1&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;d2&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;e3&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; undefined&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;before-sort&quot;&gt;What V8 does before actually sorting &lt;a class=&quot;bookmark&quot; href=&quot;#before-sort&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;V8 has two pre-processing steps before it actually sorts anything. First, if the object to sort has holes and elements on the prototype chain, they are copied from the prototype chain to the object itself. This frees us from caring about the prototype chain during all remaining steps. This is currently only done for non-&lt;code&gt;JSArray&lt;/code&gt;s but other engines do it for &lt;code&gt;JSArray&lt;/code&gt;s as well.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/array-sort/copy-prototype.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Copying from the prototype chain&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The second pre-processing step is the removal of holes. All elements in the sort-range are moved to the beginning of the object. &lt;code&gt;undefined&lt;/code&gt;s are moved after that. This is even required by the spec to some degree as it requires us to &lt;em&gt;always&lt;/em&gt; sort &lt;code&gt;undefined&lt;/code&gt;s to the end. The result is that a user-provided comparison function will never get called with an &lt;code&gt;undefined&lt;/code&gt; argument. After the second pre-processing step the sorting algorithm only needs to consider non-&lt;code&gt;undefined&lt;/code&gt;s, potentially reducing the number of elements it actually has to sort.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/array-sort/remove-array-holes.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Removing holes and moving &lt;code&gt;undefined&lt;/code&gt;s to the end&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;history&quot;&gt;History &lt;a class=&quot;bookmark&quot; href=&quot;#history&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;Array.prototype.sort&lt;/code&gt; and &lt;code&gt;TypedArray.prototype.sort&lt;/code&gt; relied on the same Quicksort implementation written in JavaScript. The sorting algorithm itself is rather straightforward: The basis is a Quicksort with an Insertion Sort fall-back for shorter arrays (length &amp;lt; 10). The Insertion Sort fall-back was also used when Quicksort recursion reached a sub-array length of 10. Insertion Sort is more efficient for smaller arrays. This is because Quicksort gets called recursively twice after partitioning. Each such recursive call had the overhead of creating (and discarding) a stack frame.&lt;/p&gt;
&lt;p&gt;Choosing a suitable pivot element has a big impact when it comes to Quicksort. V8 employed two strategies:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The pivot was chosen as the median of the first, last, and a third element of the sub-array that gets sorted. For smaller arrays that third element is simply the middle element.&lt;/li&gt;
&lt;li&gt;For larger arrays a sample was taken, then sorted and the median of the sorted sample served as the third element in the above calculation.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;One of the advantages of Quicksort is that it sorts in-place. The memory overhead comes from allocating a small array for the sample when sorting large arrays, and log(n) stack space. The downside is that it’s not a stable algorithm and there’s a chance the algorithm hits the worst-case scenario where QuickSort degrades to O(n^2).&lt;/p&gt;
&lt;h3 id=&quot;introducing-v8-torque&quot;&gt;Introducing V8 Torque &lt;a class=&quot;bookmark&quot; href=&quot;#introducing-v8-torque&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As an avid reader of the V8 blog you might have heard of &lt;a href=&quot;https://v8.js.cn/blog/csa&quot;&gt;&lt;code&gt;CodeStubAssembler&lt;/code&gt;&lt;/a&gt; or CSA for short. CSA is a V8 component that allows us to write low-level TurboFan IR directly in C++ that later gets translated to machine code for the appropriate architecture using TurboFan’s backend.&lt;/p&gt;
&lt;p&gt;CSA is heavily utilized to write so-called “fast-paths” for JavaScript builtins. A fast-path version of a builtin usually checks whether certain invariants hold (e.g. no elements on the prototype chain, no accessors, etc) and then uses faster, more specific operations to implement the builtin functionality. This can result in execution times that are an order of magnitude faster than a more generic version.&lt;/p&gt;
&lt;p&gt;The downside of CSA is that it really can be considered an assembly language. Control-flow is modeled using explicit &lt;code&gt;labels&lt;/code&gt; and &lt;code&gt;gotos&lt;/code&gt;, which makes implementing more complex algorithms in CSA hard to read and error-prone.&lt;/p&gt;
&lt;p&gt;Enter &lt;a href=&quot;https://v8.js.cn/docs/torque&quot;&gt;V8 Torque&lt;/a&gt;. Torque is a domain-specific language with TypeScript-like syntax that currently uses CSA as its sole compilation target. Torque allows nearly the same level of control as CSA does while at the same time offering higher-level constructs such as &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loops. Additionally, it’s strongly typed and will in the future contain security checks such as automatic out-of-bound checks providing V8 engineers with stronger guarantees.&lt;/p&gt;
&lt;p&gt;The first major builtins that were re-written in V8 Torque were &lt;a href=&quot;https://v8.js.cn/blog/v8-release-68&quot;&gt;&lt;code&gt;TypedArray#sort&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://v8.js.cn/blog/dataview&quot;&gt;&lt;code&gt;Dataview&lt;/code&gt; operations&lt;/a&gt;. Both served the additional purpose of providing feedback to the Torque developers on what languages features are needed and idioms should be used to write builtins efficiently. At the time of writing, several &lt;code&gt;JSArray&lt;/code&gt; builtins had their self-hosted JavaScript fall-back implementations moved to Torque (e.g. &lt;code&gt;Array#unshift&lt;/code&gt;) while others were completely re-written (e.g. &lt;code&gt;Array#splice&lt;/code&gt; and &lt;code&gt;Array#reverse&lt;/code&gt;).&lt;/p&gt;
&lt;h3 id=&quot;moving-array%23sort-to-torque&quot;&gt;Moving &lt;code&gt;Array#sort&lt;/code&gt; to Torque &lt;a class=&quot;bookmark&quot; href=&quot;#moving-array%23sort-to-torque&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The initial &lt;code&gt;Array#sort&lt;/code&gt; Torque version was more or less a straight up port of the JavaScript implementation. The only difference was that instead of using a sampling approach for larger arrays, the third element for the pivot calculation was chosen at random.&lt;/p&gt;
&lt;p&gt;This worked reasonably well, but as it still utilized Quicksort, &lt;code&gt;Array#sort&lt;/code&gt; remained unstable. &lt;a href=&quot;https://bugs.chromium.org/p/v8/issues/detail?id=90&quot;&gt;The request for a stable &lt;code&gt;Array#sort&lt;/code&gt;&lt;/a&gt; is among the oldest tickets in V8’s bug tracker. Experimenting with Timsort as a next step offered us multiple things. First, we like that it’s stable and offers some nice algorithmic guarantees (see next section). Second, Torque was still a work-in-progress and implementing a more complex builtin such as &lt;code&gt;Array#sort&lt;/code&gt; with Timsort resulted in lots of actionable feedback influencing Torque as a language.&lt;/p&gt;
&lt;h2 id=&quot;timsort&quot;&gt;Timsort &lt;a class=&quot;bookmark&quot; href=&quot;#timsort&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Timsort, initially developed by Tim Peters for Python in 2002, could best be described as an adaptive stable Mergesort variant. Even though the details are rather complex and are best described by &lt;a href=&quot;https://github.com/python/cpython/blob/master/Objects/listsort.txt&quot;&gt;the man himself&lt;/a&gt; or the &lt;a href=&quot;https://en.wikipedia.org/wiki/Timsort&quot;&gt;Wikipedia page&lt;/a&gt;, the basics are easy to understand. While Mergesort usually works in recursive fashion, Timsort works iteratively. It processes an array from left to right and looks for so-called &lt;em&gt;runs&lt;/em&gt;. A run is simply a sequence that is already sorted. This includes sequences that are sorted “the wrong way” as these sequences can simply be reversed to form a run. At the start of the sorting process a minimum run length is determined that depends on the length of the input. If Timsort can’t find natural runs of this minimum run length a run is “boosted artificially” using Insertion Sort.&lt;/p&gt;
&lt;p&gt;Runs that are found this way are tracked using a stack that remembers a starting index and a length of each run. From time to time runs on the stack are merged together until only one sorted run remains. Timsort tries to maintain a balance when it comes to deciding which runs to merge. On the one hand you want to try and merge early as the data of those runs has a high chance of already being in the cache, on the other hand you want to merge as late as possible to take advantage of patterns in the data that might emerge. To accomplish this, Timsort maintains two invariants. Assuming &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, and &lt;code&gt;C&lt;/code&gt; are the three top-most runs:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;|C| &amp;gt; |B| + |A|&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;|B| &amp;gt; |A|&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/array-sort/runs-stack.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Runs stack before and after merging &lt;code&gt;A&lt;/code&gt; with &lt;code&gt;B&lt;/code&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The image shows the case where &lt;code&gt;|A| &amp;gt; |B|&lt;/code&gt; so &lt;code&gt;B&lt;/code&gt; is merged with the smaller of the two runs.&lt;/p&gt;
&lt;p&gt;Note that Timsort only merges consecutive runs, this is needed to maintain stability, otherwise equal elements would be transferred between runs. Also the first invariant makes sure that run lengths grow at least as fast as the Fibonacci numbers, giving an upper bound on the size of the run stack when we know the maximum array length.&lt;/p&gt;
&lt;p&gt;One can now see that already-sorted sequences are sorted in O(n) as such an array would result in a single run that does not need to get merged. The worst case is O(n log n). These algorithmic properties together with the stable nature of Timsort were a few of the reasons why we chose Timsort over Quicksort in the end.&lt;/p&gt;
&lt;h3 id=&quot;implementing-timsort-in-torque&quot;&gt;Implementing Timsort in Torque &lt;a class=&quot;bookmark&quot; href=&quot;#implementing-timsort-in-torque&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Builtins usually have different code-paths that are chosen during runtime depending on various variables. The most generic version can handle any kind of object, regardless if its a &lt;code&gt;JSProxy&lt;/code&gt;, has interceptors or needs to do prototype chain lookups when retrieving or setting properties.&lt;br&gt;
The generic path is rather slow in most cases, as it needs to account for all eventualities. But if we know upfront that the object to sort is a simple &lt;code&gt;JSArray&lt;/code&gt; containing only Smis, all these expensive &lt;code&gt;[[Get]]&lt;/code&gt; and &lt;code&gt;[[Set]]&lt;/code&gt; operations can be replaced by simple Loads and Stores to a &lt;code&gt;FixedArray&lt;/code&gt;. The main differentiator is the &lt;a href=&quot;https://v8.js.cn/blog/elements-kinds&quot;&gt;&lt;code&gt;ElementsKind&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The problem now becomes how to implement a fast-path. The core algorithm stays the same for all but the way we access elements changes based on the &lt;code&gt;ElementsKind&lt;/code&gt;. One way we could accomplish this is to dispatch to the correct “accessor” on each call-site. Imagine a switch for each “load”/”store” operation where we choose a different branch based on the chosen fast-path.&lt;/p&gt;
&lt;p&gt;Another solution (and this was the first approach tried) is to just copy the whole builtin once for each fast-path and inline the correct load/store access method. This approach turned out to be infeasible for Timsort as it’s a big builtin and making a copy for each fast-path turned out to require 106 KB in total, which is way too much for a single builtin.&lt;/p&gt;
&lt;p&gt;The final solution is slightly different. Each load/store operation for each fast-path is put into its own “mini-builtin”. See the code example which shows the “load” operation for &lt;code&gt;FixedDoubleArray&lt;/code&gt;s.&lt;/p&gt;
&lt;pre class=&quot;language-torque&quot;&gt;&lt;code class=&quot;language-torque&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;Load&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FastDoubleElements&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    context&lt;span class=&quot;token class-name&quot;&gt;: Context,&lt;/span&gt; sortState&lt;span class=&quot;token class-name&quot;&gt;: FixedArray,&lt;/span&gt; elements&lt;span class=&quot;token class-name&quot;&gt;: HeapObject,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    index&lt;span class=&quot;token class-name&quot;&gt;: Smi)&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;: Object {&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; elems&lt;span class=&quot;token class-name&quot;&gt;: FixedDoubleArray =&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;UnsafeCast&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;FixedDoubleArray&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elements&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; value&lt;span class=&quot;token class-name&quot;&gt;: float64 =&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;        LoadDoubleWithHoleCheck&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;elems&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;otherwise&lt;/span&gt; Bailout&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; AllocateHeapNumberWithValue&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;value&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;label&lt;/span&gt; Bailout &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// The pre-processing step removed all holes by compacting all elements&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// at the start of the array. Finding a hole means the cmp function or&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token comment&quot;&gt;// ToString changes the array.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; Failure&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;sortState&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To compare, the most generic “load” operation is simply a call to &lt;code&gt;GetProperty&lt;/code&gt;. But while the above version generates efficient and fast machine code to load and convert a &lt;code&gt;Number&lt;/code&gt;, &lt;code&gt;GetProperty&lt;/code&gt; is a call to another builtin that could potentially involve a prototype chain lookup or invoke an accessor function.&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;builtin Load&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;ElementsAccessor &lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; type&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    context&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; sortState&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; FixedArray&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; elements&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; HeapObject&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    index&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Smi&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; Object &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;GetProperty&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;context&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; elements&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; index&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;A fast-path then simply becomes a set of function pointers. This means we only need one copy of the core algorithm while setting up all relevant function pointers once upfront. While this greatly reduces the needed code space (down to 20k) it comes at the cost of an indirect branch at each access site. This is even exacerbated by the recent change to use &lt;a href=&quot;https://v8.js.cn/blog/embedded-builtins&quot;&gt;embedded builtins&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;sort-state&quot;&gt;Sort state &lt;a class=&quot;bookmark&quot; href=&quot;#sort-state&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/array-sort/sort-state.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The picture above shows the “sort state”. It’s a &lt;code&gt;FixedArray&lt;/code&gt; that keeps track of all the things needed while sorting. Each time &lt;code&gt;Array#sort&lt;/code&gt; is called, such a sort state is allocated. Entry 4 to 7 are the set of function pointers discussed above that comprise a fast-path.&lt;/p&gt;
&lt;p&gt;The “check” builtin is used every time we return from user JavaScript code, to check if we can continue on the current fast-path. It uses the “initial receiver map” and “initial receiver length” for this.  Should the user code have modified the current object, we simply abandon the sorting run, reset all pointers to their most generic version and restart the sorting process. The “bailout status” in slot 8 is used to signal this reset.&lt;/p&gt;
&lt;p&gt;The “compare” entry can point to two different builtins. One calls a user-provided comparison function while the other implements the default comparison that calls &lt;code&gt;toString&lt;/code&gt; on both arguments and then does a lexicographical comparison.&lt;/p&gt;
&lt;p&gt;The rest of the fields (with the exception of the fast path ID) are Timsort-specific. The run stack (described above) is initialized with a size of 85 which is enough to sort arrays of length 2&lt;sup&gt;64&lt;/sup&gt;. The temporary array is used for merging runs. It grows in size as needed but never exceeds &lt;code&gt;n/2&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the input length.&lt;/p&gt;
&lt;h3 id=&quot;performance-trade-offs&quot;&gt;Performance trade-offs &lt;a class=&quot;bookmark&quot; href=&quot;#performance-trade-offs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Moving sorting from self-hosted JavaScript to Torque comes with performance trade-offs. As &lt;code&gt;Array#sort&lt;/code&gt; is written in Torque, it’s now a statically compiled piece of code, meaning we still can build fast-paths for certain &lt;a href=&quot;https://v8.js.cn/blog/elements-kinds&quot;&gt;&lt;code&gt;ElementsKind&lt;/code&gt;s&lt;/a&gt; but it will never be as fast as a highly optimized TurboFan version that can utilize type feedback. On the other hand, in cases where the code doesn’t get hot enough to warrant JIT compilation or the call-site is megamorphic, we are stuck with the interpreter or a slow/generic version. The parsing, compiling and possible optimizing of the self-hosted JavaScript version is also an overhead that is not needed with the Torque implementation.&lt;/p&gt;
&lt;p&gt;While the Torque approach doesn’t result in the same peak performance for sorting, it does avoid performance cliffs. The result is a sorting performance that is much more predictable than it previously was. Keep in mind that Torque is very much in flux and in addition of targeting CSA it might target TurboFan in the future, allowing JIT compilation of code written in Torque.&lt;/p&gt;
&lt;h3 id=&quot;microbenchmarks&quot;&gt;Microbenchmarks &lt;a class=&quot;bookmark&quot; href=&quot;#microbenchmarks&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Before we started with &lt;code&gt;Array#sort&lt;/code&gt;, we added a lot of different micro-benchmarks to get a better understanding of the impact the re-implementation would have. The first chart shows the “normal” use case of sorting various ElementsKinds with a user-provided comparison function.&lt;/p&gt;
&lt;p&gt;Keep in mind that in these cases the JIT compiler can do a lot of work, since sorting is nearly all we do. This also allows the optimizing compiler to inline the comparison function in the JavaScript version, while we have the call overhead from the builtin to JavaScript in the Torque case. Still, we perform better in nearly all cases.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/array-sort/micro-bench-basic.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The next chart shows the impact of Timsort when processing arrays that are already sorted completely, or have sub-sequences that are already sorted one-way or another. The chart uses Quicksort as a baseline and shows the speedup of Timsort (up to 17× in the case of “DownDown” where the array consists of two reverse-sorted sequences). As can be seen, expect in the case of random data, Timsort performs better in all other cases, even though we are sorting &lt;code&gt;PACKED_SMI_ELEMENTS&lt;/code&gt;, where Quicksort outperformed Timsort in the microbenchmark above.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/array-sort/micro-bench-presorted.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;web-tooling-benchmark&quot;&gt;Web Tooling Benchmark &lt;a class=&quot;bookmark&quot; href=&quot;#web-tooling-benchmark&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&quot;https://github.com/v8/web-tooling-benchmark&quot;&gt;Web Tooling Benchmark&lt;/a&gt; is a collection of workloads of tools usually used by web developers such as Babel and TypeScript. The chart uses JavaScript Quicksort as a baseline and compares the speedup of Timsort against it. In almost all benchmarks we retain the same performance with the exception of chai.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/array-sort/web-tooling-benchmark.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The chai benchmark spends &lt;em&gt;a third&lt;/em&gt; of its time inside a single comparison function (a string distance calculation). The benchmark is the test suite of chai itself. Due to the data, Timsort needs some more comparisons in this case, which has a bigger impact on the overall runtime, as such a big portion of time is spent inside that particular comparison function.&lt;/p&gt;
&lt;h3 id=&quot;memory-impact&quot;&gt;Memory impact &lt;a class=&quot;bookmark&quot; href=&quot;#memory-impact&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Analyzing V8 heap snapshots while browsing some 50 sites (both on mobile as well as on desktop) didn’t show any memory regressions or improvements. On the one hand, this is surprising: the switch from Quicksort to Timsort introduced the need for a temporary array for merging runs, which can grow much larger than the temporary arrays used for sampling. On the other hand, these temporary arrays are very short-lived (only for the duration of the &lt;code&gt;sort&lt;/code&gt; call) and can be allocated and discarded rather quickly in V8’s new space.&lt;/p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;In summary we feel much better about the algorithmic properties and the predictable performance behavior of a Timsort implemented in Torque. Timsort is available starting with V8 v7.0 and Chrome 70. Happy sorting!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>在 V8 中 提升 `DataView` 的性能</title>
    <link href="https://v8.js.cn/blog/dataview"/>
    <updated>2018-09-18T11:20:37+00:00</updated>
    <id>https://v8.js.cn/blog/dataview</id>
    <author>
      <name>Théotime Grohens, le savant de Data-Vue, and Benedikt Meurer (@bmeurer), professional performance pal</name>
    </author>
    <content type="html">&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; 是在 JavaScript 中访问底层内存的两种方式之一，另一种方式是使用 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&quot;&gt;&lt;code&gt;TypedArray&lt;/code&gt;&lt;/a&gt;。 在这之前，V8 对 &lt;code&gt;DataView&lt;/code&gt; 所做的优化远逊于 &lt;code&gt;TypedArray&lt;/code&gt;，导致在图像处理密集型或解码/编码二进制数据等任务中，使用 &lt;code&gt;DataView&lt;/code&gt; 的程序性能相对较差。造成这种现象主要是历史原因, 例如 &lt;a href=&quot;http://asmjs.org/&quot;&gt;asm.js&lt;/a&gt; 在底层实现中选择了 &lt;code&gt;TypedArray&lt;/code&gt; 而不是 &lt;code&gt;DataView&lt;/code&gt;, 因此 V8 更专注于优化 &lt;code&gt;TypedArray&lt;/code&gt; 的性能.&lt;/p&gt;
&lt;p&gt;由于会导致性能下降，Google Maps 等团队中的 JavaScript 开发者决定避免使用 &lt;code&gt;DataView&lt;/code&gt;，转而使用 &lt;code&gt;TypedArray&lt;/code&gt;，但是这样做会使代码复杂性增加。 在本篇文章中，我们将着重阐述 &lt;a href=&quot;https://v8.js.cn/blog/v8-release-69&quot;&gt;V8 v6.9&lt;/a&gt; 如何优化 &lt;code&gt;DataView&lt;/code&gt; 的性能，来让它拥有可以与 &lt;code&gt;TypedArray&lt;/code&gt; 匹敌的性能，并能够被应用于真实的生产环境中。&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;背景 &lt;a class=&quot;bookmark&quot; href=&quot;#background&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;ES2015 推出之后，JavaScript 开始支持在原始二进制缓冲区中读取和写入数据，这个缓冲区被称为 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&quot;&gt;&lt;code&gt;ArrayBuffer&lt;/code&gt;&lt;/a&gt; 。&lt;code&gt;ArrayBuffer&lt;/code&gt; 无法通过程序直接访问, 我们需要使用&lt;em&gt;数组缓冲区视图&lt;/em&gt;对象来间接访问，而 &lt;code&gt;DataView&lt;/code&gt; 和 &lt;code&gt;TypedArray&lt;/code&gt; 就是两种数组缓冲区视图对象。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypedArray&lt;/code&gt; 允许程序以统一的类型数组的形式访问缓冲区，例如 &lt;code&gt;Int16Array&lt;/code&gt; 或 &lt;code&gt;Float32Array&lt;/code&gt; 。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; array &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Int16Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; array&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;length&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; i&lt;span class=&quot;token operator&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  array&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; i&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;array&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// → [0, 1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225]&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;另一方面，&lt;code&gt;DataView&lt;/code&gt; 则允许更细粒度的数据访问。 我们可以通过为每种值类型提供专门的 getter 和 setter 来选择从缓冲区读取和写入的值的类型，这使得 &lt;code&gt;DateView&lt;/code&gt; 可用于序列化数据结构。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; person &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; age&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;42&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; height&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1.76&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setUint8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;age&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setFloat64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; person&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;height&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getUint8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 期望输出: 42&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getFloat64&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 期望输出: 1.76&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此外，&lt;code&gt;DataView&lt;/code&gt; 还允许开发者选择数据存储的字节顺序，这点在从外部源（如网络，文件或 GPU 中）接收数据时非常有用。&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; buffer &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;ArrayBuffer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; view &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;DataView&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;setInt32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;0x8BADF00D&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 小端序写入.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;console&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;view&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getInt32&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token boolean&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 大端序读出.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// 期望输出: 0x0DF0AD8B (233876875)&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;很长时间以来，实现一个高效的 &lt;code&gt;DataView&lt;/code&gt; 的呼声一直很高（参见5年前的 &lt;a href=&quot;https://bugs.chromium.org/p/chromium/issues/detail?id=225811&quot;&gt;bug 报告&lt;/a&gt;)，今天，我们很高兴地宣布： DataView 的性能现已经得到大幅提升！&lt;/p&gt;
&lt;h2 id=&quot;legacy-runtime-implemention&quot;&gt;传统的运行时实现 &lt;a class=&quot;bookmark&quot; href=&quot;#legacy-runtime-implemention&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在此之前，&lt;code&gt;DataView&lt;/code&gt; 方法在 V8 中是内置的 C++ 运行时函数。这种函数的调用成本非常高昂，因为每一次跨语言调用，我们都需要在 C++ 和 JavaScript 之间进行信息的转换。&lt;/p&gt;
&lt;p&gt;为了研究这个实现实际的性能损耗，我们构建了一个性能基准测试，将原生的 &lt;code&gt;DataView&lt;/code&gt; getter 实现与模拟 &lt;code&gt;DataView&lt;/code&gt; 行为的 JavaScript 包装函数进行比较。这个包装函数使用 &lt;code&gt;Uint8Array&lt;/code&gt; 从底层缓冲区逐字节读取数据，然后利用这些字节计算出返回值。下面是读取小端序32位无符号整数值的函数：&lt;/p&gt;
&lt;pre class=&quot;language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;LittleEndian&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;token comment&quot;&gt;// 模拟小端序的 DataView 数据读取.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uint8View_ &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;Uint8Array&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;LittleEndian&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;prototype&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function-variable function&quot;&gt;getUint32&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;byteOffset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uint8View_&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;byteOffset&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uint8View_&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;byteOffset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uint8View_&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;byteOffset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;uint8View_&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;byteOffset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 V8 中，我们已经对 &lt;code&gt;TypedArray&lt;/code&gt; 进行了大量的优化，因此它们的性能就是了我们想要追赶的目标。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/dataview/dataview-original.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;原始 &lt;code&gt;DataView&lt;/code&gt; 性能&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我们的基准测试显示，在大端序和小端序的数据存取测试中，原生 &lt;code&gt;DataView&lt;/code&gt; getter 的性能均比基于 &lt;code&gt;Uint8Array&lt;/code&gt; 的包装函数低了&lt;strong&gt;4倍&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;improving-baseline-performance&quot;&gt;提升基准性能 &lt;a class=&quot;bookmark&quot; href=&quot;#improving-baseline-performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;想要提高 &lt;code&gt;DataView&lt;/code&gt; 对象的性能，我们所做的第一步就是将它的实现从 C++ 运行时转移到 &lt;a href=&quot;https://v8.js.cn/blog/csa&quot;&gt;&lt;code&gt;CodeStubAssembler&lt;/code&gt;（简称 CSA）&lt;/a&gt; 中。CSA 是一种可移植的汇编语言，它允许我们直接在 TurboFan 的机器级中间表示（IR）中编写代码，我们一般使用 CSA 来实现 V8 中 JavaScript 标准库的优化部分。在 CSA 中重写代码可以完全绕过对 C++ 的调用，并利用 TurboFan 的后端来生成高效的机器代码。&lt;/p&gt;
&lt;p&gt;然而，手动编写 CSA 代码非常的麻烦。 CSA 中的控制流与汇编一样，使用的是显式的标签和 &lt;code&gt;goto&lt;/code&gt;，这使得代码阅读起来诘屈聱牙，晦涩难懂。&lt;/p&gt;
&lt;p&gt;为了使开发人员能够更容易地为 V8 JavaScript 标准库的优化做出贡献，并提高代码的可读性和可维护性，我们开始设计一种名为 V8 &lt;em&gt;Torque&lt;/em&gt; 的新语言，该语言可编译为 CSA 。&lt;em&gt;Torque&lt;/em&gt; 的目标是抽象出 CSA 代码中难以编写和维护的低层次细节，同时保持相同的性能表现。&lt;/p&gt;
&lt;p&gt;重写 &lt;code&gt;DataView&lt;/code&gt; 的代码是个尝试使用 Torque 的绝佳机会，并且可以向 Torque 的开发者提供许多相关的反馈。下面这个就是用 Torque 编写的 &lt;code&gt;getUint32()&lt;/code&gt; 函数：&lt;/p&gt;
&lt;pre class=&quot;language-torque&quot;&gt;&lt;code class=&quot;language-torque&quot;&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;macro&lt;/span&gt; LoadDataViewUint32&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;buffer&lt;span class=&quot;token class-name&quot;&gt;: JSArrayBuffer,&lt;/span&gt; offset&lt;span class=&quot;token class-name&quot;&gt;: intptr,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    requested_little_endian&lt;span class=&quot;token class-name&quot;&gt;: bool,&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;                    signed&lt;span class=&quot;token class-name&quot;&gt;: &lt;span class=&quot;token keyword&quot;&gt;constexpr&lt;/span&gt; bool)&lt;/span&gt;&lt;span class=&quot;token class-name&quot;&gt;: Number {&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; data_pointer&lt;span class=&quot;token class-name&quot;&gt;: RawPtr =&lt;/span&gt; buffer&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;backing_store&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b0&lt;span class=&quot;token class-name&quot;&gt;: uint32 =&lt;/span&gt; LoadUint8&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data_pointer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b1&lt;span class=&quot;token class-name&quot;&gt;: uint32 =&lt;/span&gt; LoadUint8&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data_pointer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b2&lt;span class=&quot;token class-name&quot;&gt;: uint32 =&lt;/span&gt; LoadUint8&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data_pointer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; b3&lt;span class=&quot;token class-name&quot;&gt;: uint32 =&lt;/span&gt; LoadUint8&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;data_pointer&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; offset &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;let&lt;/span&gt; result&lt;span class=&quot;token class-name&quot;&gt;: uint32;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;requested_little_endian&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b3 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b2 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b1 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; b0&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;{&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;    result &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b0 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b1 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;b2 &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; b3&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;  &lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; convert&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;Number&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;result&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;highlight-line&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;}&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 &lt;code&gt;DataView&lt;/code&gt; 的方法实现转移到 Torque 上已经在性能上有了&lt;strong&gt;3倍&lt;/strong&gt;的提升，但还是无法与基于 &lt;code&gt;Uint8Array&lt;/code&gt; 的包装函数相媲美。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/dataview/dataview-torque.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt; Torque 编写的 &lt;code&gt;DataView&lt;/code&gt; 性能 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;optimizing-for-turbofan&quot;&gt;优化 TurboFan &lt;a class=&quot;bookmark&quot; href=&quot;#optimizing-for-turbofan&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;当 JavaScript 代码被执行多次后，我们使用 TurboFan 优化编译器对其进行二次编译，以生成高度优化的机器代码，该机器码比解释运行的字节码运行效率更高。&lt;/p&gt;
&lt;p&gt;TurboFan 的工作原理是将传入的 JavaScript 代码转换为内部的图表示（更确切地说，这种内部表示叫 &lt;a href=&quot;https://darksi.de/d.sea-of-nodes/&quot;&gt;“sea of nodes”&lt;/a&gt; ）。它从 JavaScript 操作和语义的高级节点开始，逐渐将高级节点细化为更底层的低级节点，直到最终生成机器代码。&lt;/p&gt;
&lt;p&gt;例如，函数调用（例如调用一个 &lt;code&gt;DataView&lt;/code&gt; 的方法）在 TurboFan 内部表示为 &lt;code&gt;JSCall&lt;/code&gt; 节点，并最终归约成机器代码中实际的函数调用。&lt;/p&gt;
&lt;p&gt;但是，TurboFan 允许我们检查 &lt;code&gt;JSCall&lt;/code&gt; 节点是否是对已知函数的调用，例如调用内置函数就是其中一种情况。如果是的话，我们可以在 IR 中内联该函数调用。这意味着复杂的 &lt;code&gt;JSCall&lt;/code&gt; 在编译时被可以被内联展开， 从而使 TurboFan 可以在之后的流程中在更广泛的上下文中直接优化这个函数内部的代码。最重要的是，我们可以借此避免昂贵的函数调用开销。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/dataview/dataview-turbofan-initial.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt; 最初的 TurboFan &lt;code&gt;DataView&lt;/code&gt; 性能 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;实现了 TurboFan 的函数内联优化使 &lt;code&gt;DataView&lt;/code&gt; 的性能可以与 &lt;code&gt;Uint8Array&lt;/code&gt; 包装函数掰一掰手腕，并且比最初的 C++ 实现快 &lt;strong&gt;8倍&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&quot;further-turbofan-optimizations&quot;&gt;进一步的 TurboFan 优化 &lt;a class=&quot;bookmark&quot; href=&quot;#further-turbofan-optimizations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;在内联 &lt;code&gt;DataView&lt;/code&gt; 方法后，我们查看了 TurboFan 生成的机器代码，发现仍然有一些改进的余地。 &lt;code&gt;DataView&lt;/code&gt; 方法的第一版实现正试图贴近标准规范，并在指定的位置抛出错误（例如，当开发者试图读取或写入超出底层 &lt;code&gt;ArrayBuffer&lt;/code&gt; 的边界时）。&lt;/p&gt;
&lt;p&gt;但是，我们在 TurboFan 中编写的代码主要是为了在面对常见的执行情况时，可以尽快进行代码优化 —— 它不需要支持所有可能的边缘情况。因此我们可以删除不必要的错误处理，取而代之的是，在需要抛出错误时只是简单地回退至非优化实现的 Torque 代码（去优化），这样能够将生成的代码的大小减少大约 35％，并显著提升代码执行速度，以及生成更简洁的 TurboFan 代码。&lt;/p&gt;
&lt;p&gt;沿着这个在 TurboFan 中尽可能特化的想法，我们还移除了对优化代码中过大（Smi 之外）的索引或偏移的支持。这使得我们能够摆脱对 float64 算法中不合适的 32 位偏移的处理，并避免在堆上存储大整数。&lt;/p&gt;
&lt;p&gt;与最初的 TurboFan 实现相比，这项优化使得 &lt;code&gt;DataView&lt;/code&gt; 基准测试分数翻了一倍还多。&lt;code&gt;DataView&lt;/code&gt; 目前的性能是 &lt;code&gt;Uint8Array&lt;/code&gt; 包装函数的 3 倍，更比原始 &lt;code&gt;DataView&lt;/code&gt; 运行速度的快了 &lt;strong&gt;16 倍&lt;/strong&gt;之多！&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/dataview/dataview-turbofan-final.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt; 最终的 TurboFan &lt;code&gt;DataView&lt;/code&gt; 性能 &lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;impact&quot;&gt;影响 &lt;a class=&quot;bookmark&quot; href=&quot;#impact&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;基于上面的基准测试，我们已经评估了 &lt;code&gt;DataView&lt;/code&gt; 的新实现在一些真实示例中的性能影响。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DataView&lt;/code&gt; 经常被用来解码以二进制格式编码的数据。 例如，有一种二进制格式叫 &lt;a href=&quot;https://en.wikipedia.org/wiki/FBX&quot;&gt;FBX&lt;/a&gt;，常被用于交换 3D 动画。我们对一个很受欢迎的 3D JavaScript 库 &lt;a href=&quot;https://threejs.org/&quot;&gt;three.js&lt;/a&gt; 的 FBX 加载程序进行了检测，发现其代码执行时间缩短了10％（约80毫秒）。&lt;/p&gt;
&lt;p&gt;我们将 &lt;code&gt;DataView&lt;/code&gt; 的整体性能与 &lt;code&gt;TypedArray&lt;/code&gt; 进行了比较，结果发现新的 &lt;code&gt;DataView&lt;/code&gt; 实现与 &lt;code&gt;TypedArray&lt;/code&gt; 在性能方面不分伯仲。尤其在访问以原生字节顺序排列的数据（英特尔处理器上的小端）时，新实现弥补上了大多数的性能差距，并使&lt;code&gt;DataView&lt;/code&gt;成为了 V8 上的实用之选。&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/dataview/dataview-vs-typedarray.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;&lt;code&gt;DataView&lt;/code&gt; vs. &lt;code&gt;TypedArray&lt;/code&gt; 峰值性能&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我们诚挚地希望开发者可以尝试使用新的 &lt;code&gt;DataView&lt;/code&gt;，而不是依赖于用 &lt;code&gt;TypedArray&lt;/code&gt; 实现的 shim。 请向我们发送有关您使用 &lt;code&gt;DataView&lt;/code&gt; 的反馈！ 您可以使用我们的 &lt;a href=&quot;https://crbug.com/v8/new&quot;&gt;错误跟踪器&lt;/a&gt; ，或将邮件发送到&lt;a href=&quot;mailto:v8-users@googlegroups.com&quot;&gt;v8-users@googlegroups.com&lt;/a&gt;，或在 Twitter 上 &lt;a href=&quot;https://v8.js.cn/blog/https%EF%BC%9A//twitter.com/v8js&quot;&gt;@ v8js&lt;/a&gt;。&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Celebrating 10 years of V8</title>
    <link href="https://v8.js.cn/blog/10-years"/>
    <updated>2018-09-11T19:00:00+00:00</updated>
    <id>https://v8.js.cn/blog/10-years</id>
    <author>
      <name>Mathias Bynens (@mathias), V8 historian</name>
    </author>
    <content type="html">&lt;p&gt;This month marks the 10-year anniversary of shipping not just Google Chrome, but also the V8 project. This post gives an overview of major milestones for the V8 project in the past 10 years as well as the years before, when the project was still secret.&lt;/p&gt;
&lt;figure&gt;
  &lt;iframe src=&quot;https://www.youtube.com/embed/G0vnrPTuxZA&quot; width=&quot;966&quot; height=&quot;543&quot;&gt;&lt;/iframe&gt;
  &lt;figcaption&gt;A visualization of the V8 code base over time, created using &lt;a href=&quot;http://gource.io/&quot;&gt;&lt;code&gt;gource&lt;/code&gt;&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;before-v8-shipped%3A-the-early-years&quot;&gt;Before V8 shipped: the early years &lt;a class=&quot;bookmark&quot; href=&quot;#before-v8-shipped%3A-the-early-years&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Google hired &lt;a href=&quot;https://en.wikipedia.org/wiki/Lars_Bak_%28computer_programmer%29&quot;&gt;Lars Bak&lt;/a&gt; in the autumn of &lt;strong&gt;2006&lt;/strong&gt; to build a new JavaScript engine for the Chrome web browser, which at the time was still a secret internal Google project. Lars had recently moved back to Aarhus, Denmark, from Silicon Valley. Since there was no Google office there and Lars wanted to remain in Denmark, Lars and several of the project’s original engineers began working on the project in an outbuilding on his farm. The new JavaScript runtime was christened “V8”, a playful reference to the powerful engine you can find in a classic muscle car. Later, when the V8 team had grown, the developers moved from their modest quarters to a modern office building in Aarhus, but the team took with them their singular drive and focus on building the fastest JavaScript runtime on the planet.&lt;/p&gt;
&lt;h2 id=&quot;launching-and-evolving-v8&quot;&gt;Launching and evolving V8 &lt;a class=&quot;bookmark&quot; href=&quot;#launching-and-evolving-v8&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8 went open-source the same day &lt;a href=&quot;https://blog.chromium.org/2008/09/welcome-to-chromium_02.html&quot;&gt;Chrome was launched&lt;/a&gt;: on September 2nd, &lt;strong&gt;2008&lt;/strong&gt;. &lt;a href=&quot;https://chromium.googlesource.com/v8/v8/+/43d26ecc3563a46f62a0224030667c8f8f3f6ceb&quot;&gt;The initial commit&lt;/a&gt; dates back to June 30th, 2008. Prior to that date, V8 development happened in a private CVS repository. Initially, V8 supported only the ia32 and ARM instruction sets and used &lt;a href=&quot;https://scons.org/&quot;&gt;SCons&lt;/a&gt; as its build system.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2009&lt;/strong&gt; saw the introduction of a brand new regular expression engine named &lt;a href=&quot;https://blog.chromium.org/2009/02/irregexp-google-chromes-new-regexp.html&quot;&gt;Irregexp&lt;/a&gt;, resulting in performance improvements for real-world regular expressions. With the introduction of an x64 port, the number of supported instruction sets increased from two to three. 2009 also marked &lt;a href=&quot;https://github.com/nodejs/node-v0.x-archive/releases/tag/v0.0.1&quot;&gt;the first release of the Node.js project&lt;/a&gt;, which embeds V8. The possibility for non-browser projects to embed V8 was &lt;a href=&quot;https://www.google.com/googlebooks/chrome/big_16.html&quot;&gt;explicitly mentioned&lt;/a&gt; in the original Chrome comic. With Node.js, it actually happened! Node.js grew to be one of the most popular JavaScript ecosystems.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2010&lt;/strong&gt; witnessed a big boost in runtime performance as V8 introduced a brand-new optimizing JIT compiler. &lt;a href=&quot;https://blog.chromium.org/2010/12/new-crankshaft-for-v8.html&quot;&gt;Crankshaft&lt;/a&gt; generated machine code that was twice as fast and 30% smaller than the previous (unnamed) V8 compiler. That same year, V8 added its fourth instruction set: 32-bit MIPS.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2011&lt;/strong&gt; came, and garbage collection was vastly improved. &lt;a href=&quot;https://blog.chromium.org/2011/11/game-changer-for-interactive.html&quot;&gt;A new incremental garbage collector&lt;/a&gt; drastically reduced pause times while maintaining great peak performance and low memory usage. V8 introduced the concept of Isolates, which allows embedders to spin up multiple instances of the V8 runtime in a process, paving the way for lighter-weight Web Workers in Chrome. The first of V8’s two build system migrations occurred as we transitioned from SCons to &lt;a href=&quot;https://gyp.gsrc.io/&quot;&gt;GYP&lt;/a&gt;. We implemented support for ES5 strict mode. Meanwhile, development moved from Aarhus to Munich (Germany) under new leadership with lots of cross-pollination from the original team in Aarhus.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2012&lt;/strong&gt; was a year of benchmarks for the V8 project. The team did speed sprints to optimize V8’s performance as measured through the &lt;a href=&quot;https://webkit.org/perf/sunspider/sunspider.html&quot;&gt;Sunspider&lt;/a&gt; and &lt;a href=&quot;https://krakenbenchmark.mozilla.org/&quot;&gt;Kraken&lt;/a&gt; benchmark suites. Later, we developed a new benchmark suite named &lt;a href=&quot;https://chromium.github.io/octane/&quot;&gt;Octane&lt;/a&gt; (with &lt;a href=&quot;http://www.netchain.com/Tools/v8/&quot;&gt;V8 Bench&lt;/a&gt; at its core) that brought peak performance competition to the forefront and spurred massive improvements in runtime and JIT technology in all major JS engines. One outcome of these efforts was the switch from randomized sampling to a deterministic, count-based technique for detecting “hot” functions in V8’s runtime profiler. This made it significantly less likely that some page loads (or benchmark runs) would randomly be much slower than others.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2013&lt;/strong&gt; witnessed the appearance of a low-level subset of JavaScript named &lt;a href=&quot;http://asmjs.org/&quot;&gt;asm.js&lt;/a&gt;. Since asm.js is limited to statically-typed arithmetic, function calls, and heap accesses with primitive types only, validated asm.js code could run with predictable performance. We released a new version of Octane, &lt;a href=&quot;https://blog.chromium.org/2013/11/announcing-octane-20.html&quot;&gt;Octane 2.0&lt;/a&gt; with updates to existing benchmarks as well as new benchmarks that target use cases like asm.js. Octane spurred the development of new compiler optimizations like &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/42478.pdf&quot;&gt;allocation folding&lt;/a&gt; and &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/43823.pdf&quot;&gt;allocation-site-based optimizations for type transitioning and pretenuring&lt;/a&gt; that vastly improved peak performance. As part of an effort we internally nicknamed “Handlepocalypse”, the V8 Handle API was completely rewritten to make it easier to use correctly and safely. Also in 2013, Chrome’s implementation of &lt;code&gt;TypedArray&lt;/code&gt;s in JavaScript was &lt;a href=&quot;https://codereview.chromium.org/13064003&quot;&gt;moved from Blink to V8&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;2014&lt;/strong&gt;, V8 moved some of the work of JIT compilation off the main thread with &lt;a href=&quot;https://blog.chromium.org/2014/02/compiling-in-background-for-smoother.html&quot;&gt;concurrent compilation&lt;/a&gt;, reducing jank and significantly improving performance. Later that year, we &lt;a href=&quot;https://github.com/v8/v8/commit/a1383e2250dc5b56b777f2057f1600537f02023e&quot;&gt;landed&lt;/a&gt; the initial version of a new optimizing compiler named TurboFan. Meanwhile, our partners helped port V8 to three new instruction set architectures: PPC, MIPS64, and ARM64. Following Chromium, V8 transitioned to yet another build system, &lt;a href=&quot;https://gn.googlesource.com/gn/#gn&quot;&gt;GN&lt;/a&gt;. The V8 testing infrastructure saw significant improvements, with a &lt;em&gt;Tryserver&lt;/em&gt; now available to test each patch on various build bots before landing. For source control, V8 migrated from SVN to Git.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2015&lt;/strong&gt; was a busy year for V8 on a number of fronts. We implemented &lt;a href=&quot;https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html&quot;&gt;code caching and script streaming&lt;/a&gt;, significantly speeding up web page load times. Work on our runtime system’s use of allocation mementos was &lt;a href=&quot;https://ai.google/research/pubs/pub43823&quot;&gt;published in ISMM 2015&lt;/a&gt;. Later that year, we &lt;a href=&quot;https://github.com/v8/v8/commit/7877c4e0c77b5c2b97678406eab7e9ad6eba4a4d&quot;&gt;kicked off&lt;/a&gt; the work on a new interpreter named Ignition. We experimented with the idea of subsetting JavaScript with &lt;a href=&quot;https://docs.google.com/document/d/1Qk0qC4s_XNCLemj42FqfsRLp49nDQMZ1y7fwf5YjaI4/view&quot;&gt;strong mode&lt;/a&gt; to achieve stronger guarantees and more predictable performance. We implemented strong mode behind a flag, but later found its benefits did not justify the costs. The addition of a &lt;a href=&quot;https://dev.chromium.org/developers/testing/commit-queue&quot;&gt;commit queue&lt;/a&gt; made big improvements in productivity and stability. V8’s garbage collector also began cooperating with embedders such as Blink to schedule garbage collection work during idle periods. &lt;a href=&quot;https://v8.js.cn/blog/free-garbage-collection&quot;&gt;Idle-time garbage collection&lt;/a&gt; significantly reduced observable garbage collection jank and memory consumption. In December, &lt;a href=&quot;https://github.com/titzer/v8-native-prototype&quot;&gt;the first WebAssembly prototype&lt;/a&gt; landed in V8.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;2016&lt;/strong&gt;, we shipped the last pieces of the ES2015 (previously known as “ES6”) feature set (including promises, class syntax, lexical scoping, destructuring, and more), as well as some ES2016 features. We also started rolling out the new Ignition and TurboFan pipeline, using it to &lt;a href=&quot;https://v8.js.cn/blog/v8-release-56&quot;&gt;compile and optimize ES2015 and ES2016 features&lt;/a&gt;, and shipping Ignition by default for &lt;a href=&quot;https://v8.js.cn/blog/ignition-interpreter&quot;&gt;low-end Android devices&lt;/a&gt;. Our successful work on idle-time garbage collection was presented at &lt;a href=&quot;https://static.googleusercontent.com/media/research.google.com/en//pubs/archive/45361.pdf&quot;&gt;PLDI 2016&lt;/a&gt;. We kicked off &lt;a href=&quot;https://v8.js.cn/blog/orinoco&quot;&gt;the Orinoco project&lt;/a&gt;, a new mostly-parallel and concurrent garbage collector for V8 to reduce main thread garbage collection time. In a major refocus, we shifted our performance efforts away from synthetic micro-benchmarks and instead began to seriously measure and optimize &lt;a href=&quot;https://v8.js.cn/blog/real-world-performance&quot;&gt;real-world performance&lt;/a&gt;. For debugging, the V8 inspector was &lt;a href=&quot;https://v8.js.cn/blog/v8-release-55&quot;&gt;migrated&lt;/a&gt; from Chromium to V8, allowing any V8 embedder (and not just Chromium) to use the Chrome DevTools to debug JavaScript running in V8. The WebAssembly prototype graduated from prototype to experimental support, in coordination with other browser vendors &lt;a href=&quot;https://v8.js.cn/blog/webassembly-experimental&quot;&gt;experimental support for WebAssembly&lt;/a&gt;. V8 received &lt;a href=&quot;http://www.sigplan.org/Awards/Software/&quot;&gt;the ACM SIGPLAN Programming Languages Software Award&lt;/a&gt;. And another port was added: S390.&lt;/p&gt;
&lt;p&gt;In &lt;strong&gt;2017&lt;/strong&gt;, we finally completed our multi-year overhaul of the engine, enabling the new &lt;a href=&quot;https://v8.js.cn/blog/launching-ignition-and-turbofan&quot;&gt;Ignition and TurboFan&lt;/a&gt; pipeline by default. This made it possible to later remove Crankshaft (&lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/547717&quot;&gt;130,380 deleted lines of code&lt;/a&gt;) and &lt;a href=&quot;https://chromium-review.googlesource.com/c/v8/v8/+/584773&quot;&gt;Full-codegen&lt;/a&gt; from the codebase. We launched Orinoco v1.0, including &lt;a href=&quot;https://v8.js.cn/blog/concurrent-marking&quot;&gt;concurrent marking&lt;/a&gt;, concurrent sweeping, parallel scavenging, and parallel compaction. We officially recognized Node.js as a first-class V8 embedder alongside Chromium. Since then, it’s impossible for a V8 patch to land if doing so breaks the Node.js test suite. Our infrastructure gained support for correctness fuzzing, ensuring that any piece of code produces consistent results regardless of the configuration it runs in.&lt;/p&gt;
&lt;p&gt;In an industry-wide coordinated launch, V8 &lt;a href=&quot;https://v8.js.cn/blog/v8-release-57&quot;&gt;shipped WebAssembly on-by-default&lt;/a&gt;. We implemented support for &lt;a href=&quot;https://developers.google.com/web/fundamentals/primers/modules&quot;&gt;JavaScript modules&lt;/a&gt; as well as the full ES2017 and ES2018 feature sets (including async functions, shared memory, async iteration, rest/spread properties, and RegExp features). We shipped &lt;a href=&quot;https://v8.js.cn/blog/javascript-code-coverage&quot;&gt;native support for JavaScript code coverage&lt;/a&gt;, and launched the &lt;a href=&quot;https://v8.js.cn/blog/web-tooling-benchmark&quot;&gt;Web Tooling Benchmark&lt;/a&gt; to help us measure how V8’s optimizations impact performance for real-world developer tools and the JavaScript output they generate. &lt;a href=&quot;https://v8.js.cn/blog/tracing-js-dom&quot;&gt;Wrapper tracing&lt;/a&gt; from JavaScript objects to C++ DOM objects and back allowed us to resolve long-standing memory leaks in Chrome and to handle the transitive closure of objects over the JavaScript and Blink heap efficiently. We later used this infrastructure to increase the capabilities of the heap snapshotting developer tool.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2018&lt;/strong&gt; saw an industry-wide security event upend what we thought we knew about CPU information security with the public disclosure of &lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html&quot;&gt;the Spectre/Meltdown vulnerabilities&lt;/a&gt;. V8 engineers performed extensive offensive research to help understand the threat for managed languages and develop mitigations. V8 shipped &lt;a href=&quot;https://v8.js.cn/docs/untrusted-code-mitigations&quot;&gt;mitigations&lt;/a&gt; against Spectre and similar side-channel attacks for embedders that run untrusted code.&lt;/p&gt;
&lt;p&gt;Recently, we shipped a baseline compiler for WebAssembly named &lt;a href=&quot;https://v8.js.cn/blog/liftoff&quot;&gt;Liftoff&lt;/a&gt; which greatly reduces startup time for WebAssembly applications while still achieving predictable performance. We shipped &lt;a href=&quot;https://v8.js.cn/blog/bigint&quot;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt;, a new JavaScript primitive that enables &lt;a href=&quot;https://developers.google.com/web/updates/2018/05/bigint&quot;&gt;arbitrary-precision integers&lt;/a&gt;. We implemented &lt;a href=&quot;https://v8.js.cn/blog/embedded-builtins&quot;&gt;embedded builtins&lt;/a&gt;, and made it possible to &lt;a href=&quot;https://v8.js.cn/blog/lazy-deserialization&quot;&gt;lazily deserialize them&lt;/a&gt;, significantly reducing V8’s footprint for multiple Isolates. We made it possible to &lt;a href=&quot;https://v8.js.cn/blog/background-compilation&quot;&gt;compile script bytecode on a background thread&lt;/a&gt;. We started &lt;a href=&quot;https://docs.google.com/presentation/d/12ZkJ0BZ35fKXtpM342PmKM5ZSxPt03_wsRgbsJYl3Pc&quot;&gt;the Unified V8-Blink Heap project&lt;/a&gt; to run a cross-component V8 and Blink garbage collection in sync. And the year’s not over yet…&lt;/p&gt;
&lt;h2 id=&quot;performance-ups-and-downs&quot;&gt;Performance ups and downs &lt;a class=&quot;bookmark&quot; href=&quot;#performance-ups-and-downs&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Chrome’s V8 Bench score over the years shows the performance impact of V8’s changes. (We’re using the V8 Bench because it’s one of the few benchmarks that can still run in the original Chrome beta.)&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/10-years/v8-bench.png&quot; srcset=&quot;https://v8.js.cn/_img/10-years/v8-bench@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Chrome’s &lt;a href=&quot;http://www.netchain.com/Tools/v8/&quot;&gt;V8 Bench&lt;/a&gt; score from 2008 to 2018&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Our score on this benchmark went up &lt;strong&gt;4×&lt;/strong&gt; over the last ten years!&lt;/p&gt;
&lt;p&gt;However, you might notice two performance dips over the years. Both are interesting because they correspond to significant events in V8’s history. The performance drop in 2015 happened when V8 shipped baseline versions of ES2015 features. These features were cross-cutting in the V8 code base, and we therefore focused on correctness rather than performance for their initial release. We accepted these slight speed regressions to get features to developers as quickly as possible. In early 2018, the Spectre vulnerability was disclosed, and V8 shipped mitigations to protect users against potential exploits, resulting in another regression in performance. Luckily, now that Chrome is shipping &lt;a href=&quot;https://developers.google.com/web/updates/2018/07/site-isolation&quot;&gt;Site Isolation&lt;/a&gt;, we can disable the mitigations again, bringing performance back on par.&lt;/p&gt;
&lt;p&gt;Another take-away from this chart is that it starts to level off around 2013. Does that mean V8 gave up and stopped investing in performance? Quite the opposite! The flattening of the graphs represents the V8 team’s pivot from synthetic micro-benchmarks (such as V8 Bench and Octane) to optimizing for &lt;a href=&quot;https://v8.js.cn/blog/real-world-performance&quot;&gt;real-world performance&lt;/a&gt;. V8 Bench is an old benchmark that doesn’t use any modern JavaScript features, nor does it approximate actual real-world production code. Contrast this with the more recent Speedometer benchmark suite:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/10-years/speedometer-1.png&quot; srcset=&quot;https://v8.js.cn/_img/10-years/speedometer-1@2x.png 2x&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Chrome’s &lt;a href=&quot;https://browserbench.org/Speedometer/&quot;&gt;Speedometer 1&lt;/a&gt; score from 2013 to 2018&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Although V8 Bench shows minimal improvements from 2013 to 2018, our Speedometer 1 score went up (another) &lt;strong&gt;4×&lt;/strong&gt; during this same time period. (We used Speedometer 1 because Speedometer 2 uses modern JavaScript features that weren’t yet supported in 2013.)&lt;/p&gt;
&lt;p&gt;Nowadays, we have &lt;a href=&quot;https://v8.js.cn/blog/speedometer-2&quot;&gt;even better&lt;/a&gt; &lt;a href=&quot;https://v8.js.cn/blog/web-tooling-benchmark&quot;&gt;benchmarks&lt;/a&gt; that more accurately reflect modern JavaScript apps, and on top of that, we &lt;a href=&quot;https://www.youtube.com/watch?v=xCx4uC7mn6Y&quot;&gt;actively measure and optimize for existing web apps&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;summary&quot;&gt;Summary &lt;a class=&quot;bookmark&quot; href=&quot;#summary&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Although V8 was originally built for Google Chrome, it has always been a stand-alone project with a separate codebase and an embedding API that allows any program to use its JavaScript execution services. Over the last 10 years, the open nature of the project has helped it become a key technology not only for the Web Platform, but in other contexts like Node.js as well. Along the way the project evolved and remained relevant despite many changes and dramatic growth.&lt;/p&gt;
&lt;p&gt;Initially, V8 supported only two instruction sets. In the last 10 years the list of supported platforms reached eight: ia32, x64, ARM, ARM64, 32- and 64-bit MIPS, 64-bit PPC, and S390. V8’s build system migrated from SCons to GYP to GN. The project moved from Denmark to Germany, and now has engineers all over the world, including in London, Mountain View, and San Francisco, with contributors outside of Google from many more places. We’ve transformed our entire JavaScript compilation pipeline from unnamed components to Full-codegen (a baseline compiler) and Crankshaft (an feedback-driven optimizing compiler) to Ignition (an interpreter) and TurboFan (a better feedback-driven optimizing compiler). V8 went from being “just” a JavaScript engine to also supporting WebAssembly. The JavaScript language itself evolved from ECMAScript 3 to ES2018; the latest V8 even implements post-ES2018 features.&lt;/p&gt;
&lt;p&gt;The story arc of Web is a long and enduring one. Celebrating Chrome and V8’s 10th birthday is a good opportunity to reflect that even though this is a big milestone, the Web Platform’s narrative has lasted for more than 25 years. We have no doubt the Web’s story will continue for at least that long in the future. We’re committed to making sure that V8, JavaScript, and WebAssembly continue to be interesting characters in that narrative. We’re excited to see what the next decade has in store. Stay tuned!&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Liftoff: a new baseline compiler for WebAssembly in V8</title>
    <link href="https://v8.js.cn/blog/liftoff"/>
    <updated>2018-08-20T15:45:12+00:00</updated>
    <id>https://v8.js.cn/blog/liftoff</id>
    <author>
      <name>Clemens Hammacher, WebAssembly compilation maestro</name>
    </author>
    <content type="html">&lt;p&gt;V8 &lt;a href=&quot;https://v8.js.cn/blog/v8-release-69&quot;&gt;v6.9&lt;/a&gt; includes Liftoff, a new baseline compiler for WebAssembly. Liftoff is now enabled by default on desktop systems. This article details the motivation to add another compilation tier and describes the implementation and performance of Liftoff.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-liftoff.svg&quot; width=&quot;256&quot; height=&quot;256&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Logo for Liftoff, V8’s WebAssembly baseline compiler&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Since WebAssembly &lt;a href=&quot;https://v8.js.cn/blog/v8-release-57&quot;&gt;launched&lt;/a&gt; more than a year ago, adoption on the web has been steadily increasing. Big applications targeting WebAssembly have started to appear. For example, Epic’s &lt;a href=&quot;https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html&quot;&gt;ZenGarden benchmark&lt;/a&gt; comprises a 39.5 MB WebAssembly binary, and &lt;a href=&quot;https://web.autocad.com/&quot;&gt;AutoDesk&lt;/a&gt; ships as a 36.8 MB binary. Since compilation time is essentially linear in the binary size, these applications take a considerable time to start up. On many machines it’s more than 30 seconds, which does not provide a great user experience.&lt;/p&gt;
&lt;p&gt;But why does it take this long to start up a WebAssembly app, if similar JS apps start up much faster? The reason is that WebAssembly promises to deliver &lt;em&gt;predictable performance&lt;/em&gt;, so once the app is running, you can be sure to consistently meet your performance goals (e.g. rendering 60 frames per second, no audio lag or artifacts…). In order to achieve this, WebAssembly code is compiled &lt;em&gt;ahead of time&lt;/em&gt; in V8, to avoid any compilation pause introduced by a just-in-time compiler that could result in visible jank in the app.&lt;/p&gt;
&lt;h2 id=&quot;the-existing-compilation-pipeline-(turbofan)&quot;&gt;The existing compilation pipeline (TurboFan) &lt;a class=&quot;bookmark&quot; href=&quot;#the-existing-compilation-pipeline-(turbofan)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8’s approach to compiling WebAssembly has relied on &lt;em&gt;TurboFan&lt;/em&gt;, the optimizing compiler we designed for JavaScript and asm.js. TurboFan is a powerful compiler with a graph-based &lt;em&gt;intermediate representation (IR)&lt;/em&gt; suitable for advanced optimizations such as strength reduction, inlining, code motion, instruction combining, and sophisticated register allocation. TurboFan’s design supports entering the pipeline very late, nearer to machine code, which bypasses many of the stages necessary for supporting JavaScript compilation. By design, transforming WebAssembly code into TurboFan’s IR (including &lt;a href=&quot;https://en.wikipedia.org/wiki/Static_single_assignment_form&quot;&gt;&lt;em&gt;SSA-construction&lt;/em&gt;&lt;/a&gt;) in a straightforward single pass is very efficient, partially due to WebAssembly’s structured control flow. Yet the backend of the compilation process still consumes considerable time and memory.&lt;/p&gt;
&lt;h2 id=&quot;the-new-compilation-pipeline-(liftoff)&quot;&gt;The new compilation pipeline (Liftoff) &lt;a class=&quot;bookmark&quot; href=&quot;#the-new-compilation-pipeline-(liftoff)&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The goal of Liftoff is to reduce startup time for WebAssembly-based apps by generating code as fast as possible. Code quality is secondary, as hot code is eventually recompiled with TurboFan anyway. Liftoff avoids the time and memory overhead of constructing an IR and generates machine code in a single pass over the bytecode of a WebAssembly function.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/pipeline.svg&quot; alt=&quot;The Liftoff compilation pipeline is much simpler compared to the TurboFan compilation pipeline.&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;From the diagram above it is obvious that Liftoff should be able to generate code much faster than TurboFan since the pipeline only consists of two stages. In fact, the &lt;em&gt;function body decoder&lt;/em&gt; does a single pass over the raw WebAssembly bytes and interacts with the subsequent stage via callbacks, so &lt;em&gt;code generation&lt;/em&gt; is performed &lt;em&gt;while decoding and validating&lt;/em&gt; the function body. Together with WebAssembly’s &lt;em&gt;&lt;a href=&quot;https://v8.js.cn/blog/v8-release-65&quot;&gt;streaming APIs&lt;/a&gt;&lt;/em&gt;, this allows V8 to compile WebAssembly code to machine code while downloading over the network.&lt;/p&gt;
&lt;h3 id=&quot;code-generation-in-liftoff&quot;&gt;Code generation in Liftoff &lt;a class=&quot;bookmark&quot; href=&quot;#code-generation-in-liftoff&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Liftoff is a simple code generator, and fast. It performs only one pass over the opcodes of a function, generating code for each opcode, one at a time. For simple opcodes like arithmetics, this is often a single machine instruction, but can be more for others like calls. Liftoff maintains metadata about the operand stack in order to know where the inputs of each operation are currently stored. This &lt;em&gt;virtual stack&lt;/em&gt; exists only during compilation. WebAssembly’s structured control flow and validation rules guarantee that the location of these inputs can be statically determined. Thus an actual runtime stack onto which operands are pushed and popped is not necessary. During execution, each value on the virtual stack will either be held in a register or be spilled to the physical stack frame of that function. For small integer constants (generated by &lt;code&gt;i32.const&lt;/code&gt;), Liftoff only records the constant’s value in the virtual stack and does not generate any code. Only when the constant is used by a subsequent operation, it is emitted or combined with the operation, for example by directly emitting a &lt;code&gt;addl &amp;lt;reg&amp;gt;, &amp;lt;const&amp;gt;&lt;/code&gt; instruction on x64. This avoids ever loading that constant into a register, resulting in better code.&lt;/p&gt;
&lt;p&gt;Let’s go through a very simple function to see how Liftoff generates code for that.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/example-1.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;This example function takes two parameters and returns their sum. When Liftoff decodes the bytes of this function, it first begins by initializing its internal state for the local variables according to the calling convention for WebAssembly functions. For x64, V8’s calling convention passes the two parameters in the registers &lt;em&gt;rax&lt;/em&gt; and &lt;em&gt;rdx&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;For &lt;code&gt;get_local&lt;/code&gt; instructions, Liftoff does not generate any code, but instead just updates its internal state to reflect that these register values are now pushed on the virtual stack. The &lt;code&gt;i32.add&lt;/code&gt; instruction then pops the two registers and chooses a register for the result value. We  cannot use any of the input registers for the result, since both registers still appear on the stack for holding the local variables. Overwriting them would change the value returned by a later &lt;code&gt;get_local&lt;/code&gt; instruction. So Liftoff picks a free register, in this case &lt;em&gt;rcx&lt;/em&gt;, and produce the sum of &lt;em&gt;rax&lt;/em&gt; and &lt;em&gt;rdx&lt;/em&gt; into that register. &lt;em&gt;rcx&lt;/em&gt; is then pushed onto the virtual stack.&lt;/p&gt;
&lt;p&gt;After the &lt;code&gt;i32.add&lt;/code&gt; instruction, the function body is finished, so Liftoff must assemble the function return. As our example function has one return value, validation requires that there must be exactly one value on the virtual stack at the end of the function body. So Liftoff generates code that moves the return value held in &lt;em&gt;rcx&lt;/em&gt; into the proper return register &lt;em&gt;rax&lt;/em&gt; and then returns from the function.&lt;/p&gt;
&lt;p&gt;For the sake of simplicity, the example above does not contain any blocks (&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;loop&lt;/code&gt; …) or branches. Blocks in WebAssembly introduce control merges, since code can branch to any parent block, and if-blocks can be skipped. These merge points can be reached from different stack states. Following code, however, has to assume a specific stack state to generate code. Thus, Liftoff snapshots the current state of the virtual stack as the state which will be assumed for code following the new block (i.e. when returning to the &lt;em&gt;control level&lt;/em&gt; where we currently are). The new block will then continue with the currently active state, potentially changing where stack values or locals are stored: some might be spilled to the stack or held in other registers. When branching to another block or ending a block (which is the same as branching to the parent block), Liftoff must generate code that adapts the current state to the expected state at that point, such that the code emitted for the target we branch to finds the right values where it expects them. Validation guarantees that the height of the current virtual stack matches the height of the expected state, so Liftoff need only generate code to shuffle values between registers and/or the physical stack frame as shown below.&lt;/p&gt;
&lt;p&gt;Let’s look at an example of that.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/example-2.svg&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;p&gt;The example above assumes a virtual stack with two values on the operand stack. Before starting the new block, the top value on the virtual stack is popped as argument to the &lt;code&gt;if&lt;/code&gt; instruction. The remaining stack value needs to be put in another register, since it is currently shadowing the first parameter, but when branching back to this state we might need to hold two different values for the stack value and the parameter. In this case Liftoff chooses to deduplicate it into the &lt;em&gt;rcx&lt;/em&gt; register. This state is then snapshotted, and the active state is modified within the block. At the end of the block, we implicitly branch back to the parent block, so we merge the current state into the snapshot by moving register &lt;em&gt;rbx&lt;/em&gt; into &lt;em&gt;rcx&lt;/em&gt; and reloading register &lt;em&gt;rdx&lt;/em&gt; from the stack frame.&lt;/p&gt;
&lt;h3 id=&quot;tiering-up-from-liftoff-to-turbofan&quot;&gt;Tiering up from Liftoff to TurboFan &lt;a class=&quot;bookmark&quot; href=&quot;#tiering-up-from-liftoff-to-turbofan&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With Liftoff and Turbofan, V8 now has two compilation tiers for WebAssembly: Liftoff as the baseline compiler for fast startup and TurboFan as optimizing compiler for maximum performance. This poses the question of how to combine the two compilers to provide the best overall user experience.&lt;/p&gt;
&lt;p&gt;For JavaScript, V8 uses the Ignition interpreter and the TurboFan compiler and employs a dynamic tier-up strategy. Each function is first executed in Ignition, and if the function becomes hot, TurboFan compiles it into highly-optimized machine code. A similar approach could also be used for Liftoff, but the tradeoffs are a bit different here:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;WebAssembly does not require type feedback to generate fast code. Where JavaScript greatly benefits from gathering type feedback, WebAssembly is statically typed, so the engine can generate optimized code right away.&lt;/li&gt;
&lt;li&gt;WebAssembly code should run &lt;em&gt;predictably&lt;/em&gt; fast, without a lengthy warm-up phase. One of the reasons applications target WebAssembly is to execute on the web &lt;em&gt;with predictable high performance&lt;/em&gt;. So we can neither tolerate running suboptimal code for too long, nor do we accept compilation pauses during execution.&lt;/li&gt;
&lt;li&gt;An important design goal of the Ignition interpreter for JavaScript is to reduce memory usage by not compiling functions at all. Yet we found that an interpreter for WebAssembly is far too slow to deliver on the goal of predictably fast performance. We did, in fact, build such an interpreter, but being 20× or more slower than compiled code, it is only useful for debugging, regardless of how much memory it saves. Given this, the engine must store compiled code anyway; in the end it should store only the most compact and most efficient code, which is TurboFan optimized code.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;From these constraints we concluded that dynamic tier-up is not the right tradeoff for V8’s implementation of WebAssembly right now, since it would increase code size and reduce performance for an indeterminate time span. Instead, we chose a strategy of &lt;em&gt;eager tier-up&lt;/em&gt;. Immediately after Liftoff compilation of a module finished, the WebAssembly engine starts background threads to generate optimized code for the module. This allows V8 to start executing code quickly (after Liftoff finished), but still have the most performant TurboFan code available as early as possible.&lt;/p&gt;
&lt;p&gt;The picture below shows the trace of compiling and executing &lt;a href=&quot;https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html&quot;&gt;the EpicZenGarden benchmark&lt;/a&gt;. It shows that right after Liftoff compilation we can instantiate the WebAssembly module and start executing it. TurboFan compilation still takes several more seconds, so during that tier-up period the observed execution performance gradually increases since individual TurboFan functions are used as soon as they are finished.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/tierup-liftoff-turbofan.png&quot; alt=&quot;&quot;&gt;
&lt;/figure&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Two metrics are interesting for evaluating the performance of the new Liftoff compiler. First we want to compare the compilation speed (i.e. time to generate code) with TurboFan. Second, we want to measure the performance of the generated code (i.e. execution speed). The first measure is the more interesting here, since the goal of Liftoff is to reduce startup time by generating code as quickly as possible. On the other hand, the performance of the generated code should still be pretty good since that code might still execute for several seconds or even minutes on low-end hardware.&lt;/p&gt;
&lt;h3 id=&quot;performance-of-generating-code&quot;&gt;Performance of generating code &lt;a class=&quot;bookmark&quot; href=&quot;#performance-of-generating-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;For measuring the &lt;em&gt;compiler performance&lt;/em&gt; itself, we ran a number of benchmarks and measured the raw compilation time using tracing (see picture above). We run both benchmarks on an HP Z840 machine (2 x Intel Xeon E5-2690 @2.6GHz, 24 cores, 48 threads) and on a Macbook Pro (Intel Core i7-4980HQ @2.8GHz, 4 cores, 8 threads). Note that Chrome does currently not use more than 10 background threads, so most of the cores of the Z840 machine are unused.&lt;/p&gt;
&lt;p&gt;We execute three benchmarks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://s3.amazonaws.com/mozilla-games/ZenGarden/EpicZenGarden.html&quot;&gt;&lt;strong&gt;EpicZenGarden&lt;/strong&gt;&lt;/a&gt;: The ZenGarden demo running on the Epic framework&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://webassembly.org/demo/&quot;&gt;&lt;strong&gt;Tanks!&lt;/strong&gt;&lt;/a&gt;: A demo of the Unity engine&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://web.autocad.com/&quot;&gt;&lt;strong&gt;AutoDesk&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://pspdfkit.com/webassembly-benchmark/&quot;&gt;&lt;strong&gt;PSPDFKit&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For each benchmark, we measure the raw compilation time using the tracing output as shown above. This number is more stable than any time reported by the benchmark itself, as it does not rely on a task being scheduled on the main thread and does not include unrelated work like creating the actual WebAssembly instance.&lt;/p&gt;
&lt;p&gt;The graphs below show the results of these benchmarks. Each benchmark was executed three times, and we report the average compilation time.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/performance-unity-macbook.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Code generation performance of Liftoff vs. TurboFan on a MacBook&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/performance-unity-z840.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Code generation performance of Liftoff vs. TurboFan on a Z840&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As expected, the Liftoff compiler generates code much faster both on the high-end desktop workstation as well as on the MacBook. The speedup of Liftoff over TurboFan is even bigger on the less-capable MacBook hardware.&lt;/p&gt;
&lt;h3 id=&quot;performance-of-the-generated-code&quot;&gt;Performance of the generated code &lt;a class=&quot;bookmark&quot; href=&quot;#performance-of-the-generated-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Even though performance of the generated code is a secondary goal, we want to preserve user experience with high performance in the startup phase, as Liftoff code might execute for several seconds before TurboFan code is finished.&lt;/p&gt;
&lt;p&gt;For measuring Liftoff code performance, we turned off tier-up in order to measure pure Liftoff execution. In this setup, we execute two benchmarks:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Unity headless benchmarks&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This is a number of benchmarks running in the Unity framework. They are headless, hence can be executed in the d8 shell directly. Each benchmark reports a score, which is not necessarily proportional to the execution performance, but good enough to compare the performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://pspdfkit.com/webassembly-benchmark/&quot;&gt;&lt;strong&gt;PSPDFKit&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This benchmark reports the time it takes to perform different actions on a pdf document and the time it takes to instantiate the WebAssembly module (including compilation).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Just as before, we execute each benchmark three times and use the average of the three runs. Since the scale of the recorded numbers differs significantly between the benchmarks, we report the &lt;em&gt;relative performance of Liftoff vs. TurboFan&lt;/em&gt;. A value of &lt;em&gt;+30%&lt;/em&gt; means that Liftoff code runs 30% slower than TurboFan. Negative numbers indicate that Liftoff executes faster. Here are the results:&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/performance-unity-compile.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Liftoff Performance on Unity&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;On Unity, Liftoff code execute on average around 50% slower than TurboFan code on the desktop machine and 70% slower on the MacBook. Interestingly, there is one case (Mandelbrot Script) where Liftoff code outperforms TurboFan code. This is likely an outlier where, for example, the register allocator of TurboFan is doing poorly in a hot loop. We are investigating to see if TurboFan can be improved to handle this case better.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/liftoff/performance-pspdfkit-compile.svg&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Liftoff Performance on PSPDFKit&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;On the PSPDFKit benchmark, Liftoff code executes 18-54% slower than optimized code, while initialization improves significantly, as expected. These numbers show that for real-world code which also interacts with the browser via JavaScript calls, the performance loss of unoptimized code is generally lower than on more computation-intensive benchmarks.&lt;/p&gt;
&lt;p&gt;And again, note that for these numbers we turned off tier-up completely, so we only ever executed Liftoff code. In production configurations, Liftoff code will gradually be replaced by TurboFan code, such that the lower performance of Liftoff code lasts only for short period of time.&lt;/p&gt;
&lt;h2 id=&quot;future-work&quot;&gt;Future work &lt;a class=&quot;bookmark&quot; href=&quot;#future-work&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;After the initial launch of Liftoff, we are working to further improve startup time, reduce memory usage, and bring the benefits of Liftoff to more users. In particular, we are working on improving the following things:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Port Liftoff to arm and arm64 to also use it on mobile devices.&lt;/strong&gt; Currently, Liftoff is only implemented for Intel platforms (32 and 64 bit), which mostly captures desktop use cases. In order to also reach mobile users, we will port Liftoff to more architectures.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implement dynamic tier-up for mobile devices.&lt;/strong&gt; Since mobile devices tend to have much less memory available than desktop systems, we need to adapt our tiering strategy for these devices. Just recompiling all functions with TurboFan easily doubles the memory needed to hold all code, at least temporarily (until Liftoff code is discarded). Instead, we are experimenting with a combination of lazy compilation with Liftoff and dynamic tier-up of hot functions in TurboFan.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve performance of Liftoff code generation.&lt;/strong&gt; The first iteration of an implementation is rarely the best one. There are several things which can be tuned to speed up the compilation speed of Liftoff even more. This will gradually happen over the next releases.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Improve performance of Liftoff code.&lt;/strong&gt; Apart from the compiler itself, the size and speed of the generated code can also be improved. This will also happen gradually over the next releases.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion &lt;a class=&quot;bookmark&quot; href=&quot;#conclusion&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8 now contains Liftoff, a new baseline compiler for WebAssembly. Liftoff vastly reduces start-up time of WebAssembly applications with a simple and fast code generator. On desktop systems, V8 still reaches maximum peak performance by recompiling all code in the background using TurboFan. Liftoff is enabled by default in V8 v6.9 (Chrome 69), and can be controlled explicitly with the &lt;code&gt;--liftoff&lt;/code&gt;/&lt;code&gt;--no-liftoff&lt;/code&gt; and &lt;code&gt;chrome://flags/#enable-webassembly-baseline&lt;/code&gt; flags in each, respectively.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>Embedded builtins</title>
    <link href="https://v8.js.cn/blog/embedded-builtins"/>
    <updated>2018-08-14T13:33:37+00:00</updated>
    <id>https://v8.js.cn/blog/embedded-builtins</id>
    <author>
      <name>Jakob Gruber (@schuay)</name>
    </author>
    <content type="html">&lt;p&gt;V8 built-in functions (builtins) consume memory in every instance of V8. The builtin count, average size, and the number of V8 instances per Chrome browser tab have been growing significantly. This blog post describes how we reduced the median V8 heap size per website by 19% over the past year.&lt;/p&gt;
&lt;h2 id=&quot;background&quot;&gt;Background &lt;a class=&quot;bookmark&quot; href=&quot;#background&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8 ships with an extensive library of JavaScript (JS) &lt;a href=&quot;https://v8.js.cn/docs/builtin-functions&quot;&gt;built-in functions&lt;/a&gt;. Many builtins are directly exposed to JS developers as functions installed on JS built-in objects, such as &lt;code&gt;RegExp.prototype.exec&lt;/code&gt; and &lt;code&gt;Array.prototype.sort&lt;/code&gt;; other builtins implement various internal functionality. Machine code for builtins is generated by V8’s own compiler, and is loaded onto the managed heap state for every V8 Isolate upon initialization. An Isolate represents an isolated instance of the V8 engine, and every browser tab in Chrome contains at least one Isolate. Every Isolate has its own managed heap, and thus its own copy of all builtins.&lt;/p&gt;
&lt;p&gt;Back in 2015, builtins were mostly implemented in self-hosted JS, native assembly, or in C++. They were fairly small, and creating a copy for every Isolate was less problematic.&lt;/p&gt;
&lt;p&gt;Much has changed in this space over the last years.&lt;/p&gt;
&lt;p&gt;In 2016, V8 &lt;a href=&quot;https://v8.js.cn/blog/speeding-up-regular-expressions&quot;&gt;began&lt;/a&gt; experimenting with builtins implemented in &lt;a href=&quot;https://v8.js.cn/blog/csa&quot;&gt;CodeStubAssembler&lt;/a&gt; (CSA). This turned out to both be convenient (platform-independent, readable) and to produce efficient code, so CSA builtins became ubiquitous. For a variety of reasons, CSA builtins tend to produce larger code, and the size of V8 builtins roughly tripled as more and more were ported to CSA. By mid-2017, their per-Isolate overhead had grown significantly and we started thinking about a systematic solution.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/snapshot-size.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;V8 snapshot size (including builtins) from 2015 until 2017&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;In late 2017, we implemented &lt;a href=&quot;https://v8.js.cn/blog/lazy-deserialization&quot;&gt;lazy builtin (and bytecode handler) deserialization&lt;/a&gt; as a first step. Our initial analysis showed that most sites used less than half of all builtins. With lazy deserialization, builtins are loaded on-demand, and unused builtins are never loaded into the Isolate. Lazy deserialization was shipped in Chrome 64 with promising memory savings. But: builtin memory overhead was still linear in the number of Isolates.&lt;/p&gt;
&lt;p&gt;Then, &lt;a href=&quot;https://googleprojectzero.blogspot.com/2018/01/reading-privileged-memory-with-side.html&quot;&gt;Spectre&lt;/a&gt; was disclosed, and Chrome ultimately turned on &lt;a href=&quot;https://security.googleblog.com/2018/07/mitigating-spectre-with-site-isolation.html&quot;&gt;site isolation&lt;/a&gt; to mitigate its effects. Site isolation limits a Chrome renderer process to documents from a single origin. Thus, with site isolation, many browsing tabs create more renderer processes and more V8 Isolates. Even though managing per-Isolate overhead has always been important, site isolation has made it even more so.&lt;/p&gt;
&lt;h2 id=&quot;embedded-builtins&quot;&gt;Embedded builtins &lt;a class=&quot;bookmark&quot; href=&quot;#embedded-builtins&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Our goal for this project was to completely eliminate per-Isolate builtin overhead.&lt;/p&gt;
&lt;p&gt;The idea behind it was simple. Conceptually, builtins are identical across Isolates, and are only bound to an Isolate because of implementation details. If we could make builtins truly isolate-independent, we could keep a single copy in memory and share them across all Isolates. And if we could make them process-independent, they could even be shared across processes.&lt;/p&gt;
&lt;p&gt;In practice, we faced several challenges. Generated builtin code was neither isolate- nor process-independent due to embedded pointers to isolate- and process-specific data. V8 had no concept of executing generated code located outside the managed heap. Builtins had to be shared across processes, ideally by reusing existing OS mechanisms. And finally (this turned out to be the long tail), performance must not noticeably regress.&lt;/p&gt;
&lt;p&gt;The following sections describe our solution in detail.&lt;/p&gt;
&lt;h3 id=&quot;isolate--and-process-independent-code&quot;&gt;Isolate- and process-independent code &lt;a class=&quot;bookmark&quot; href=&quot;#isolate--and-process-independent-code&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;Builtins are generated by V8’s compiler internal pipeline, which embeds references to heap constants (located on the Isolate’s managed heap), call targets (&lt;code&gt;Code&lt;/code&gt; objects, also on the managed heap), and to isolate- and process-specific addresses (e.g.: C runtime functions or a pointer to the Isolate itself, also called ’external references’) directly into the code. In x64 assembly, a load of such an object could look as follows:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Load an embedded address into register rbx.
REX.W movq rbx,0x56526afd0f70
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;V8 has a moving garbage collector, and the location of the target object could change over time. Should the target be moved during collection, the GC updates the generated code to point at the new location.&lt;/p&gt;
&lt;p&gt;On x64 (and most other architectures), calls to other &lt;code&gt;Code&lt;/code&gt; objects use an efficient call instruction which specifies the call target by an offset from the current program counter (an interesting detail: V8 reserves its entire &lt;code&gt;CODE_SPACE&lt;/code&gt; on the managed heap at startup to ensure all possible Code objects remain within an addressable offset of each other). The relevant part of the calling sequence looks like this:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Call instruction located at [pc + &amp;lt;offset&amp;gt;].
call &amp;lt;offset&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/pc-relative-call.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;A pc-relative call&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Code objects themselves live on the managed heap and are movable. When they are moved, the GC updates the offset at all relevant call sites.&lt;/p&gt;
&lt;p&gt;In order to share builtins across processes, generated code must be immutable as well as isolate- and process-independent. Both instruction sequences above do not fulfill that requirement: they directly embed addresses in the code, and are patched at runtime by the GC.&lt;/p&gt;
&lt;p&gt;To address both issues, we introduced an indirection through a dedicated, so-called root register, which holds a pointer into a known location within the current Isolate.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/isolate-layout.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Isolate layout&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;V8’s &lt;code&gt;Isolate&lt;/code&gt; class contains the roots table, which itself contains pointers to root objects on the managed heap. The root register permanently holds the address of the roots table.&lt;/p&gt;
&lt;p&gt;The new, isolate- and process-independent way to load a root object thus becomes:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Load the constant address located at the given
// offset from roots.
REX.W movq rax,[kRootRegister + &amp;lt;offset&amp;gt;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Root heap constants can be loaded directly from the roots list as above. Other heap constants use an additional indirection through a global builtins constant pool, itself stored on the roots list:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Load the builtins constant pool, then the
// desired constant.
REX.W movq rax,[kRootRegister + &amp;lt;offset&amp;gt;]
REX.W movq rax,[rax + 0x1d7]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For &lt;code&gt;Code&lt;/code&gt; targets, we initially switched to a more involved calling sequence which loads the target &lt;code&gt;Code&lt;/code&gt; object from the global builtins constant pool as above, loads the target address into a register, and finally performs an indirect call.&lt;/p&gt;
&lt;p&gt;With these changes, generated code became isolate- and process-independent and we could begin working on sharing it between processes.&lt;/p&gt;
&lt;h2 id=&quot;sharing-across-processes&quot;&gt;Sharing across processes &lt;a class=&quot;bookmark&quot; href=&quot;#sharing-across-processes&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;We initially evaluated two alternatives. Builtins could either be shared by &lt;code&gt;mmap&lt;/code&gt;-ing a data blob file into memory; or, they could be embedded directly into the binary. We took the latter approach since it had the advantage that we would automatically reuse standard OS mechanisms to share memory across processes, and the change would not require additional logic by V8 embedders such as Chrome. We were confident in this approach since &lt;a href=&quot;https://www.youtube.com/watch?v=lqE4u8s8Iik&quot;&gt;Dart’s AOT compilation&lt;/a&gt; had already successfully binary-embedded generated code.&lt;/p&gt;
&lt;p&gt;An executable binary file is split into several sections. For example, an ELF binary contains data in the &lt;code&gt;.data&lt;/code&gt; (initialized data), &lt;code&gt;.ro_data&lt;/code&gt; (initialized read-only data), and &lt;code&gt;.bss&lt;/code&gt; (uninitialized data) sections, while native executable code is placed in &lt;code&gt;.text&lt;/code&gt;. Our goal was to pack the builtins code into the &lt;code&gt;.text&lt;/code&gt; section alongside native code.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/binary-format.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Sections of an executable binary file&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;This was done by introducing a new build step that used V8’s internal compiler pipeline to generate native code for all builtins and output their contents in &lt;code&gt;embedded.cc&lt;/code&gt;. This file is then compiled into the final V8 binary.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/build-process.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;The (simplified) V8 embedded build process&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The &lt;code&gt;embedded.cc&lt;/code&gt; file itself contains both metadata and generated builtins machine code as a series of &lt;code&gt;.byte&lt;/code&gt; directives that instruct the C++ compiler (in our case, clang or gcc) to place the specified byte sequence directly into the output object file (and later the executable).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;// Information about embedded builtins are included in
// a metadata table.
V8_EMBEDDED_TEXT_HEADER(v8_Default_embedded_blob_)
__asm__(&amp;quot;.byte 0x65,0x6d,0xcd,0x37,0xa8,0x1b,0x25,0x7e\n&amp;quot;
[snip metadata]

// Followed by the generated machine code.
__asm__(V8_ASM_LABEL(&amp;quot;Builtins_RecordWrite&amp;quot;));
__asm__(&amp;quot;.byte 0x55,0x48,0x89,0xe5,0x6a,0x18,0x48,0x83\n&amp;quot;
[snip builtins code]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Contents of the &lt;code&gt;.text&lt;/code&gt; section are mapped into read-only executable memory at runtime, and the operating system will share memory across processes as long as it contains only position-independent code without relocatable symbols. This is exactly what we wanted.&lt;/p&gt;
&lt;p&gt;But V8’s &lt;code&gt;Code&lt;/code&gt; objects consist not only of the instruction stream, but also have various pieces of (sometimes isolate-dependent) metadata. Normal run-of-the-mill &lt;code&gt;Code&lt;/code&gt; objects pack both metadata and the instruction stream into a variable-sized &lt;code&gt;Code&lt;/code&gt; object that is located on the managed heap.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/code-on-heap.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;On-heap &lt;code&gt;Code&lt;/code&gt; object layout&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;As we’ve seen, embedded builtins have their native instruction stream located outside the managed heap, embedded into the &lt;code&gt;.text&lt;/code&gt; section. To preserve their metadata, each embedded builtin also has a small associated &lt;code&gt;Code&lt;/code&gt; object on the managed heap, called the &lt;em&gt;off-heap trampoline&lt;/em&gt;. Metadata is stored on the trampoline as for standard &lt;code&gt;Code&lt;/code&gt; objects, while the inlined instruction stream simply contains a short sequence which loads the address of the embedded instructions and jumps there.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/code-off-heap.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Off-heap &lt;code&gt;Code&lt;/code&gt; object layout&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;The trampoline allows V8 to handle all &lt;code&gt;Code&lt;/code&gt; objects uniformly. For most purposes, it is irrelevant whether the given &lt;code&gt;Code&lt;/code&gt; object refers to standard code on the managed heap or to an embedded builtin.&lt;/p&gt;
&lt;h3 id=&quot;optimizing-for-performance&quot;&gt;Optimizing for performance &lt;a class=&quot;bookmark&quot; href=&quot;#optimizing-for-performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;With the solution described in previous sections, embedded builtins were essentially feature-complete, but benchmarks showed that they came with significant slowdowns. For instance, our initial solution regressed &lt;a href=&quot;https://v8.js.cn/blog/speedometer-2&quot;&gt;Speedometer 2.0&lt;/a&gt; by more than 5% overall.&lt;/p&gt;
&lt;p&gt;We began to hunt for optimization opportunities, and identified major sources of slowdowns. The generated code was slower due to frequent indirections taken to access isolate- and process-dependent objects. Root constants were loaded from the root list (1 indirection), other heap constants from the global builtins constant pool (2 indirections), and external references additionally had to be unpacked from within a heap object (3 indirections). The worst offender was our new calling sequence, which had to load the trampoline Code object, call it, only to then jump to the target address. Finally, it appears that calls between the managed heap and binary-embedded code were inherently slower, possibly due to the long jump distance interfering with the CPU’s branch prediction.&lt;/p&gt;
&lt;p&gt;Our work thus concentrated on 1. reducing indirections, and 2. improving the builtin calling sequence. To address the former, we altered the Isolate object layout to turn most object loads into a single root-relative load. The global builtins constant pool still exists, but only contains infrequently-accessed objects.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/isolate-layout-optimized.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Optimized Isolate layout&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Calling sequences were significantly improved on two fronts. Builtin-to-builtin calls were converted into a single pc-relative call instruction. This was not possible for runtime-generated JIT code since the pc-relative offset could exceed the maximal 32-bit value. There, we inlined the off-heap trampoline into all call sites, reducing the calling sequence from 6 to just 2 instructions.&lt;/p&gt;
&lt;p&gt;With these optimizations, we were able to limit regressions on Speedometer 2.0 to roughly 0.5%.&lt;/p&gt;
&lt;h1 id=&quot;results&quot;&gt;Results &lt;a class=&quot;bookmark&quot; href=&quot;#results&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h1&gt;
&lt;p&gt;We evaluated the impact of embedded builtins on x64 over the top 10k most popular websites, and compared against both lazy- and eager deserialization (described above).&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/embedded-builtins/results.png&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;V8 heap size reduction vs. eager and lazy deserialization&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Whereas previously Chrome would ship with a memory-mapped snapshot that we’d deserialize on each Isolate, now the snapshot is replaced by embedded builtins that are still memory mapped but do not need to be deserialized. The cost for builtins used to be &lt;code&gt;c*(1 + n)&lt;/code&gt; where &lt;code&gt;n&lt;/code&gt; is the number of Isolates and &lt;code&gt;c&lt;/code&gt; the memory cost of all builtins, whereas now it’s just &lt;code&gt;c * 1&lt;/code&gt; (in practice, a small amount of per-Isolate overhead also remains for off heap trampolines).&lt;/p&gt;
&lt;p&gt;Compared against eager deserialization, we reduced the median V8 heap size by 19%. The median Chrome renderer process size per site has decreased by 4%. In absolute numbers, the 50th percentile saves 1.9 MB, the 30th percentile saves 3.4 MB, and the 10th percentile saves 6.5 MB per site.&lt;/p&gt;
&lt;p&gt;Significant additional memory savings are expected once bytecode handlers are also binary-embedded.&lt;/p&gt;
&lt;p&gt;Embedded builtins are rolling out on x64 in Chrome 69, and mobile platforms will follow in Chrome 70. Support for ia32 is expected to be released in late 2018.&lt;/p&gt;
&lt;p&gt;Note: All diagrams were generated using Vyacheslav Egorov’s awesome &lt;a href=&quot;https://mrale.ph/blog/2012/11/25/shaky-diagramming.html&quot;&gt;Shaky Diagramming&lt;/a&gt; tool.&lt;/p&gt;
</content>
  </entry>
  
  <entry>
    <title>V8 release v6.9</title>
    <link href="https://v8.js.cn/blog/v8-release-69"/>
    <updated>2018-08-07T13:33:37+00:00</updated>
    <id>https://v8.js.cn/blog/v8-release-69</id>
    <author>
      <name>the V8 team</name>
    </author>
    <content type="html">&lt;p&gt;Every six weeks, we create a new branch of V8 as part of our &lt;a href=&quot;https://v8.js.cn/docs/release-process&quot;&gt;release process&lt;/a&gt;. Each version is branched from V8’s Git master immediately before a Chrome Beta milestone. Today we’re pleased to announce our newest branch, &lt;a href=&quot;https://chromium.googlesource.com/v8/v8.git/+log/branch-heads/6.9&quot;&gt;V8 version 6.9&lt;/a&gt;, which is in beta until its release in coordination with Chrome 69 Stable in several weeks. V8 v6.9 is filled with all sorts of developer-facing goodies. This post provides a preview of some of the highlights in anticipation of the release.&lt;/p&gt;
&lt;h2 id=&quot;memory-savings-through-embedded-built-ins&quot;&gt;Memory savings through embedded built-ins &lt;a class=&quot;bookmark&quot; href=&quot;#memory-savings-through-embedded-built-ins&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;V8 ships with an extensive library of built-in functions. Examples are methods on built-in objects such as &lt;code&gt;Array.prototype.sort&lt;/code&gt; and &lt;code&gt;RegExp.prototype.exec&lt;/code&gt;, but also a wide range of internal functionality. Because their generation takes a long time, built-in functions are compiled at build-time and serialized into a &lt;a href=&quot;https://v8.js.cn/blog/custom-startup-snapshots&quot;&gt;snapshot&lt;/a&gt;, which is later deserialized at runtime to create the initial JavaScript heap state.&lt;/p&gt;
&lt;p&gt;Built-in functions currently consume 700 KB in each Isolate (an Isolate roughly corresponds to a browser tab in Chrome). This is quite wasteful, and last year we began working on reducing this overhead. In V8 v6.4, we shipped &lt;a href=&quot;https://v8.js.cn/blog/lazy-deserialization&quot;&gt;lazy deserialization&lt;/a&gt;, ensuring that each Isolate only pays for the built-ins that it actually needs (but each Isolate still had its own copy).&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://v8.js.cn/blog/embedded-builtins&quot;&gt;Embedded built-ins&lt;/a&gt; go one step further. An embedded built-in is shared by all Isolates, and embedded into the binary itself instead of copied onto the JavaScript heap. This means that built-ins exist in memory only once regardless of how many Isolates are running, an especially useful property now that &lt;a href=&quot;https://developers.google.com/web/updates/2018/07/site-isolation&quot;&gt;Site Isolation&lt;/a&gt; has been enabled by default. With embedded built-ins, we’ve seen a median &lt;em&gt;9% reduction of the V8 heap size&lt;/em&gt; over the top 10k websites on x64. Of these sites, 50% save at least 1.2 MB, 30% save at least 2.1 MB, and 10% save 3.7 MB or more.&lt;/p&gt;
&lt;p&gt;V8 v6.9 ships with support for embedded built-ins on x64 platforms. Other platforms will follow soon in upcoming releases. For more details, see our &lt;a href=&quot;https://v8.js.cn/blog/embedded-builtins&quot;&gt;dedicated blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;performance&quot;&gt;Performance &lt;a class=&quot;bookmark&quot; href=&quot;#performance&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;h3 id=&quot;liftoff%2C-webassembly%E2%80%99s-new-first-tier-compiler&quot;&gt;Liftoff, WebAssembly’s new first-tier compiler &lt;a class=&quot;bookmark&quot; href=&quot;#liftoff%2C-webassembly%E2%80%99s-new-first-tier-compiler&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;WebAssembly got a new baseline compiler for much faster startup of complex websites with big WebAssembly modules (such as Google Earth and AutoCAD). Depending on the hardware we are seeing speedups of more than 10×. For more details, refer to &lt;a href=&quot;https://v8.js.cn/blog/liftoff&quot;&gt;the detailed Liftoff blog post&lt;/a&gt;.&lt;/p&gt;
&lt;figure&gt;
  &lt;img src=&quot;https://v8.js.cn/_img/v8-liftoff.svg&quot; width=&quot;256&quot; height=&quot;256&quot; alt=&quot;&quot;&gt;
  &lt;figcaption&gt;Logo for Liftoff, V8’s baseline compiler for WebAssembly&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id=&quot;faster-dataview-operations&quot;&gt;Faster &lt;code&gt;DataView&lt;/code&gt; operations &lt;a class=&quot;bookmark&quot; href=&quot;#faster-dataview-operations&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://tc39.github.io/ecma262/#sec-dataview-objects&quot;&gt;&lt;code&gt;DataView&lt;/code&gt;&lt;/a&gt; methods have been reimplemented in V8 Torque, which spares a costly call to C++ compared to the former runtime implementation. Moreover, we now inline calls to &lt;code&gt;DataView&lt;/code&gt; methods when compiling JavaScript code in TurboFan, resulting in even better peak performance for hot code. Using &lt;code&gt;DataView&lt;/code&gt;s is now as efficient as using &lt;code&gt;TypedArray&lt;/code&gt;s, finally making &lt;code&gt;DataView&lt;/code&gt;s a viable choice in performance-critical situations. We’ll be covering this in more detail in an upcoming blog post about &lt;code&gt;DataView&lt;/code&gt;s, so stay tuned!&lt;/p&gt;
&lt;h3 id=&quot;faster-processing-of-weakmaps-during-garbage-collection&quot;&gt;Faster processing of &lt;code&gt;WeakMap&lt;/code&gt;s during garbage collection &lt;a class=&quot;bookmark&quot; href=&quot;#faster-processing-of-weakmaps-during-garbage-collection&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;V8 v6.9 reduces Mark-Compact garbage collection pause times by improving &lt;code&gt;WeakMap&lt;/code&gt; processing. Concurrent and incremental marking are now able to process &lt;code&gt;WeakMap&lt;/code&gt;s, whereas previously all this work was done in the final atomic pause of Mark-Compact GC. Since not all work can be moved outside of the pause, the GC now also does more work in parallel to further reduce pause times. These optimizations essentially halved the average pause time for Mark-Compact GCs in &lt;a href=&quot;https://github.com/v8/web-tooling-benchmark&quot;&gt;the Web Tooling Benchmark&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WeakMap&lt;/code&gt; processing uses a fixed-point iteration algorithm that can degrade to quadratic runtime behavior in certain cases. With the new release, V8 is now able to switch to another algorithm that is guaranteed to finish in linear time if the GC does not finish within a certain number of iterations. Previously, worst-case examples could be constructed that took the GC a few seconds to finish even with a relatively small heap, while the linear algorithm finishes within a few milliseconds.&lt;/p&gt;
&lt;h2 id=&quot;v8-api&quot;&gt;V8 API &lt;a class=&quot;bookmark&quot; href=&quot;#v8-api&quot; aria-hidden=&quot;true&quot;&gt;#&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Please use &lt;code&gt;git log branch-heads/6.8..branch-heads/6.9 include/v8.h&lt;/code&gt; to get a list of the API changes.&lt;/p&gt;
&lt;p&gt;Developers with an &lt;a href=&quot;https://v8.js.cn/docs/source-code#using-git&quot;&gt;active V8 checkout&lt;/a&gt; can use &lt;code&gt;git checkout -b 6.9 -t branch-heads/6.9&lt;/code&gt; to experiment with the new features in V8 v6.9. Alternatively you can &lt;a href=&quot;https://www.google.com/chrome/browser/beta.html&quot;&gt;subscribe to Chrome’s Beta channel&lt;/a&gt; and try the new features out yourself soon.&lt;/p&gt;
</content>
  </entry>
</feed>
